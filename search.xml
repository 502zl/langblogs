<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JSONP跨域原理解析</title>
      <link href="/langblogs/posts/49548.html"/>
      <url>/langblogs/posts/49548.html</url>
      
        <content type="html"><![CDATA[<h1 id="JSONP跨域原理解析"><a href="#JSONP跨域原理解析" class="headerlink" title="JSONP跨域原理解析"></a>JSONP跨域原理解析</h1><h2 id="产生背景"><a href="#产生背景" class="headerlink" title="产生背景"></a>产生背景</h2><p>由于用户访问安全问题，浏览器规定同源策略，即非同源下的请求都会产生跨越问题，而JSONP就是为了解决这个问题的方式</p><p>同源策略：同一协议，同一域名，同一端口。</p><h2 id="突破同源策略实现跨越"><a href="#突破同源策略实现跨越" class="headerlink" title="突破同源策略实现跨越"></a>突破同源策略实现跨越</h2><p>引导：不管是<code>&lt;script&gt;</code>或是<code>&lt;img&gt;</code>的src，还是<code>&lt;link&gt;</code>的herf都没有被同源策略限制，而src或herf链接的静态资源，本质上来说也是一个get请求。（可以F12看看network下的请求报文）<br>可以从这些标签的herf或src属性没有被同源策略限制，可以得到JSONP的一些实现原理。</p><p>ajax请求受同源策略影响，不允许进行跨域请求，而script标签src属性中的链接却可以访问跨域的js脚本，利用这个特性，服务端不再返回JSON格式的数据，而是返回一段调用某个函数的js代码，在src中进行了调用，这样实现了跨域。</p><h2 id="跨域的实现"><a href="#跨域的实现" class="headerlink" title="跨域的实现"></a>跨域的实现</h2><p>1.下面使用JSONP，将前端代码中的ajax请求去掉，添加了一个script标签，标签的src指向了另一个域<a href="http://www.practice-zhao.com下的remote.js脚本/">www.practice-zhao.com下的remote.js脚本</a></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>GoJSONP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">jsonhandle</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"age:"</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">"name:"</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jquery-1.8.3.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.practice-zhao.com/remote.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里调用了跨域的remote.js脚本，remote.js代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">jsonhandle</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"age"</span> <span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>也就是这段远程的js代码执行了上面定义的函数，弹出了提示框</p><p><img src="./medias/detail/load.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTYwOTI3MTMwMjQ5Mzkx?x-oss-process=image/format,png"></p><ol start="2"><li>进一步改进</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>GoJSONP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">jsonhandle</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"age:"</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">"name:"</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jquery-1.8.3.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">"http://www.practice-zhao.com/student.php?id=1&amp;callback=jsonhandle"</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;script&gt;&lt;\/script&gt;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里动态的添加了一个script标签，src指向跨域的一个php脚本，并且将上面的js函数名作为callback参数传入，PHP代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'age'</span> <span class="token operator">=&gt;</span> <span class="token number">20</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'张三'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$callback</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'callback'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$callback</span><span class="token operator">.</span><span class="token string double-quoted-string">"("</span><span class="token operator">.</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">")"</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PHP代码返回了一段JS语句，即</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">jsonhandle</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"age"</span> <span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>此时访问页面时，动态添加了一个script标签，src指向PHP脚本，执行返回的JS代码，成功弹出提示框。<br>所以JSONP将访问跨域请求变成了执行远程JS代码，服务端不再返回JSON格式的数据，而是返回了一段将JSON数据作为传入参数的函数执行代码。</em></p>]]></content>
      
      
      <categories>
          
          <category> JSONP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 跨域 </tag>
            
            <tag> JSONP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP常见请求头</title>
      <link href="/langblogs/posts/25.html"/>
      <url>/langblogs/posts/25.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP报文结构"><a href="#HTTP报文结构" class="headerlink" title="HTTP报文结构"></a>HTTP报文结构</h1><p>HTTP协议请求响应报文中必定包含HTTP首部，首部内容为客户端和服务器分别处理请求和相应提供所需要的信息。</p><h2 id="HTTP请求报文"><a href="#HTTP请求报文" class="headerlink" title="HTTP请求报文"></a>HTTP请求报文</h2><p><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/06/13/SWvfHkMcIqA52b6.png" alt="image.png"><br>（图片来自于《图解HTTP》）</p><h2 id="HTTP-常见请求头"><a href="#HTTP-常见请求头" class="headerlink" title="HTTP 常见请求头"></a>HTTP 常见请求头</h2><table><thead><tr><th>协议头</th><th>描述</th></tr></thead><tbody><tr><td>Accept</td><td>可接受的响应内容类型（Conten-Types）</td></tr><tr><td>Cache-Control</td><td>用来指定当前的请求或响应中，是否使用缓存机制</td></tr><tr><td>Connection</td><td>客户端想要优先使用的连接类型</td></tr><tr><td>Cookie</td><td>由之前服务器通过Set-Cookie设置</td></tr><tr><td>Content-Length</td><td>以8进制表示的请求体长度</td></tr><tr><td>Date</td><td>发送该消息的日期</td></tr><tr><td>Except</td><td>客户端希望浏览器做出特定的行为</td></tr><tr><td>Host</td><td>表示服务器域名 + 服务器所监听的端口号</td></tr><tr><td>origin</td><td>发起一个针对跨域资源共享的请求（该请求需要服务器在响应报文中加入<code>Access-Control-Allow-Origin</code>的消息头，表示访问控制所允许的来源</td></tr><tr><td>Authorization</td><td>用于表示HTTP协议中需要认证资源的认证信息</td></tr><tr><td>Proxy-Authorization</td><td>用于向代理认证的认证消息</td></tr><tr><td>Range</td><td>表示请求报文某个实体的一部分，直接偏移量以0开始</td></tr><tr><td>User-Agent</td><td>客户端的身份标识符</td></tr><tr><td>Upgrade</td><td>要求服务器升级到一个高版本的协议</td></tr><tr><td>via</td><td>告诉服务器这个请求是由哪些代理服务器发出的</td></tr><tr><td>If-Match</td><td>仅当客户端提供的实体与服务器端对应的实体相匹配上，才进行相应的操作</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP常见状态码</title>
      <link href="/langblogs/posts/24.html"/>
      <url>/langblogs/posts/24.html</url>
      
        <content type="html"><![CDATA[<h3 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h3><table><thead><tr><th>状态码</th><th>解释</th></tr></thead><tbody><tr><td>2-xx</td><td>请求成功</td></tr><tr><td>3-xx</td><td>请求资源被重定向</td></tr><tr><td>4-xx</td><td>客户端请求错误</td></tr><tr><td>5-xx</td><td>服务器错误</td></tr></tbody></table><h3 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h3><ol><li><strong>2-xx</strong>（请求成功）</li></ol><p><strong>200</strong>：资源请求成功；<br><strong>204</strong>：无内容。服务器处理请求成功，为返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档；</p><ol start="2"><li><strong>3-xx</strong>（重定向）</li></ol><p><strong>300</strong>：多种选择，请求的资源科包括多个位置，相应返回一个资源特征与地址的列表提供给客户端选择；<br><strong>301</strong>：永久移动，返回信息中会携带新的URL，浏览器会自动定向到新的URL，以后的请求都会使用新的URL；<br><strong>302</strong>：临时移动，资源只是被临时移动，<em>本次请求使用新的URL，以后的请求仍然使用原URL访问</em>：<br><strong>303</strong>：查看其它地址，资源被永久移动，但得使用GET或POST请求查看；<br><strong>304</strong>：未修改，当客户端在请求附加条件时，若满足条件时，返回修改后的资源，否则只返回304，不携带资源；<br><strong>307</strong>：临时重定向，与302相似，但<em>需要使用GET请求重定向</em>；</p><ol start="3"><li><strong>4-xx</strong>（客户端请求错误）</li></ol><p><strong>400</strong>：客户端请求的语法错误，服务器无法理解；<br><strong>401</strong>：当前请求需要用户认证；<br><strong>403</strong>：服务器接收了请求，但是拒绝执行请求；<br><strong>404</strong>：无法找到请求资源；</p><ol start="4"><li><strong>5-xx</strong>（服务器错误)</li></ol><p><strong>500</strong>：服务器内部错误（执行请求时发生错误、Web应用程序报错、其他临时错误等）；<br><strong>502</strong>：作为网关或者代理服务器尝试执行求情时，从远处服务器接收到一个无效的响应；<br><strong>503</strong>：服务器宕机（超载、停机更新维护）；<br><strong>505</strong>：服务器不支持请求的HTTP协议，无法处理：</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈 HTTP</title>
      <link href="/langblogs/posts/20.html"/>
      <url>/langblogs/posts/20.html</url>
      
        <content type="html"><![CDATA[<h1 id="浅谈-HTTP"><a href="#浅谈-HTTP" class="headerlink" title="浅谈 HTTP"></a>浅谈 HTTP</h1><h2 id="？？？到底是什么玩意？？？"><a href="#？？？到底是什么玩意？？？" class="headerlink" title="？？？到底是什么玩意？？？"></a>？？？到底是什么玩意？？？</h2><p>超文本传输协议（Hypertext Transfer Protocol，HTTP）是一个简单的请求-响应协议，它通常运行在TCP协议之上。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。请求和响应消息的头以ASCII形式给出；而消息内容则具有一个类似MIME的格式。(来自于百度百科)</p><h2 id="闲谈"><a href="#闲谈" class="headerlink" title="闲谈"></a>闲谈</h2><p>起初HTTP的建立，主要是为了将超文本标记语言（HTML）文档从服务器发送到客户端，但到了WEB2.0之后，页面开始变得越来越复杂，不仅仅是单纯的文字和图片，同时开始有了CSS，JavaScript等技术来丰富HTML页面的展示效果，当AJAX的出现，多了一种向服务器获取数据的方法，因为这些技术都基于HTTP协议实现的，所以这些技术的出现同时也推动了HTTP的发展与改进。</p><h2 id="上真料"><a href="#上真料" class="headerlink" title="上真料"></a>上真料</h2><h3 id="有图有真相"><a href="#有图有真相" class="headerlink" title="有图有真相"></a>有图有真相</h3><p><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/06/09/TP9agh2LQ17jvor.png" alt="HTTP请求流程.PNG"></p><h3 id="一次HTTP请求"><a href="#一次HTTP请求" class="headerlink" title="一次HTTP请求"></a>一次HTTP请求</h3><ol><li>建立TCP连接</li><li>客户端发送请求</li><li>服务器端响应</li><li>断开TCP连接</li></ol><p>所以有一句话是这样说的: HTTP是基于TCP/IP协议族来传递数据的!  </p><p>???为什么呢???  </p><p>因为在网络的五层架构(应用层，传输层，网络层，链路层，物理层)里面，HTTP协议服务于应用层，TCP协议服务于传输层，IP协议服务于网络层，而上层的实现需要下一层的服务，比如客户端应用程序需要请求服务器资源，需要使用HTTP协议并生成请求报文，这是应用层要做的事，而这个请求报文的数据包想要发出去，必须得借助下层（传输层，网络层等等）的服务来完成，但是为了解决传输效率，校验和开销等诸多问题，各层会在请求报文前加上自己的头信息，所以到达物理层时，应用程序单纯的请求被加了三个头部信息，变成了 链路层数据头 + IP头 + TCP头 + 应用程序数据。</p><p>图示：</p><p><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/06/09/yx5VTWCinEKjf4X.png" alt="报文封装.png"></p><h3 id="HTTP-的基本优化"><a href="#HTTP-的基本优化" class="headerlink" title="HTTP 的基本优化"></a>HTTP 的基本优化</h3><p>影响HTTP网络请求的因素只要有两个：带宽和延迟。</p><ul><li>带宽： 传输使用的路径有多大容量</li><li>延迟：<ul><li>浏览器阻塞：浏览器会因为一些原因阻塞（比如浏览器对统一域名的连接会一定限制，超过最大连接数，后续请求就会被阻塞）</li><li>DNS开销</li><li>建立TCP连接</li></ul></li></ul><h2 id="HTTP的改进"><a href="#HTTP的改进" class="headerlink" title="HTTP的改进"></a>HTTP的改进</h2><h3 id="HTTP1-1-和-HTTP1-0-的区别"><a href="#HTTP1-1-和-HTTP1-0-的区别" class="headerlink" title="HTTP1.1 和 HTTP1.0 的区别"></a>HTTP1.1 和 HTTP1.0 的区别</h3><ol><li><p><strong>缓存处理</strong>：在HTTP1.0中主要使用header里的If-Modified-Since,Expires来做为缓存判断的标准，HTTP1.1则引入了更多的缓存控制策略例如Entity tag，If-Unmodified-Since, If-Match, If-None-Match等更多可供选择的缓存头来控制缓存策略。</p></li><li><p><strong>带宽优化及网络连接的使用</strong>：HTTP1.0中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，HTTP1.1则在请求头引入了range头域，它允许只请求资源的某个部分，即返回码是206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。</p></li><li><p><strong>错误通知的管理</strong>：在HTTP1.1中新增了24个错误状态响应码，如409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删除。</p></li><li><p><strong>Host头处理</strong>：在HTTP1.0中认为每台服务器都绑定一个唯一的IP地址，因此，请求消息中的URL并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机（Multi-homed Web Servers），并且它们共享一个IP地址。HTTP1.1的请求消息和响应消息都应支持Host头域，且请求消息中如果没有Host头域会报告一个错误（400 Bad Request）。</p></li><li><p><strong>长连接</strong>: HTTP 1.1支持长连接（PersistentConnection）和请求的流水线（Pipelining）处理，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟，在HTTP1.1中默认开启Connection： keep-alive，一定程度上弥补了HTTP1.0每次请求都要创建连接的缺点。</p></li></ol><h3 id="SPDY：HTTP1-x的优化-延迟和安全性"><a href="#SPDY：HTTP1-x的优化-延迟和安全性" class="headerlink" title="SPDY：HTTP1.x的优化(延迟和安全性)"></a>SPDY：HTTP1.x的优化(延迟和安全性)</h3><ol><li><p><strong>降低延迟</strong>：针对HTTP高延迟的问题，SPDY优雅的采取了多路复用（multiplexing）。多路复用通过多个请求stream共享一个tcp连接的方式，解决了HOL blocking的问题，降低了延迟同时提高了带宽的利用率。</p></li><li><p><strong>请求优先级（request prioritization）</strong>: 多路复用带来一个新的问题是，在连接共享的基础之上有可能会导致关键请求被阻塞。SPDY允许给每个request设置优先级，这样重要的请求就会优先得到响应。比如浏览器加载首页，首页的html内容应该优先展示，之后才是各种静态资源文件，脚本文件等加载，这样可以保证用户能第一时间看到网页内容。</p></li><li><p><strong>header压缩</strong>: 前面提到HTTP1.x的header很多时候都是重复多余的。选择合适的压缩算法可以减小包的大小和数量。</p></li><li><p><strong>基于HTTPS的加密协议传输</strong>：大大提高了传输数据的可靠性</p></li><li><p><strong>服务端推送（server push）</strong>：采用了SPDY的网页，例如我的网页有一个sytle.css的请求，在客户端收到sytle.css数据的同时，服务端会将sytle.js的文件推送给客户端，当客户端再次尝试获取sytle.js时就可以直接从缓存中获取到，不用再发请求了。</p></li></ol><p>SPDY构成：</p><p><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/06/09/btry2W5GDnTcSgH.jpg" alt="SPDY构成图.PNG"></p><p>SPDY位于HTTP之下，TCP和SSL之上，这样可以轻松兼容老版本的HTTP协议(将HTTP1.x的内容封装成一种新的frame格式)，同时可以使用已有的SSL功能。</p><h3 id="HTTP2-0-SPDY的升级版"><a href="#HTTP2-0-SPDY的升级版" class="headerlink" title="HTTP2.0: SPDY的升级版"></a>HTTP2.0: SPDY的升级版</h3><p>点击查看 <a href="https://http2.akamai.com/demo">HTTP2.0 与 HTTP1.0的演示</a></p><p>与SPDY的区别:</p><ol><li><p><strong>明文传输</strong>：HTTP2.0 支持明文 HTTP 传输，而 SPDY 强制使用 HTTPS</p></li><li><p>HTTP2.0 消息头的压缩算法采用 HPACK，而非 SPDY 采用的 DEFLATE</p></li></ol><p>HTTP2.0 与 HTTP1.X 的区别</p><ol><li><p><strong>新的二进制格式（Binary Format）</strong>：HTTP1.x的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认0和1的组合。基于这种考虑HTTP2.0的协议解析决定采用二进制格式，实现方便且健壮。</p></li><li><p><strong>多路复用（MultiPlexing）</strong>：即连接共享，即每一个request都是是用作连接共享机制的。一个request对应一个id，这样一个连接上可以有多个request，每个连接的request可以随机的混杂在一起，接收方可以根据request的 id将request再归属到各自不同的服务端请求里面。</p></li><li><p><strong>header压缩</strong>：如上文中所言，对前面提到过HTTP1.x的header带有大量信息，而且每次都要重复发送，HTTP2.0使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小。</p></li><li><p><strong>服务端推送（server push）</strong>：同SPDY一样，HTTP2.0也具有server push功能。</p></li></ol><p>多路复用的好处:</p><p>HTTP 性能优化的关键并不在于高带宽，而是降低延迟。TCP 连接会随着时间进行自我「调谐」，起初会限制连接的最大速度，如果数据成功传输，会随着时间的推移指数提高传输的速度。这种调谐则被称为 TCP 慢启动。由于这种原因，让原本就具有突发性和短时性的 HTTP 连接变的十分低效。HTTP/2 通过让所有数据流共用同一个连接，可以更有效地使用 TCP 连接，让高带宽也能真正的服务于 HTTP 的性能提升。</p><h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><h3 id="HTTP特点"><a href="#HTTP特点" class="headerlink" title="HTTP特点"></a>HTTP特点</h3><ol><li><p><strong>无状态</strong>：协议对客户端没有状态存储，对事物处理没有“记忆”能力，比如访问一个网站需要反复进行登录操作</p></li><li><p><strong>无连接</strong>：HTTP/1.1之前，由于无状态特点，每次请求需要通过TCP三次握手四次挥手，和服务器重新建立连接。比如某个客户机在短时间多次请求同一个资源，服务器并不能区别是否已经响应过用户的请求，所以每次需要重新响应请求，需要耗费不必要的时间和流量。</p></li><li><p><strong>基与请求与响应</strong>：基本的特性，由客户端发起请求，服务端响应</p></li><li><p><strong>明文传输</strong>：通信使用明文、请求和响应不会对通信方进行确认、无法保护数据的完整性</p></li></ol><h2 id="HTTPS-HTTP-SSL（安全套接层）"><a href="#HTTPS-HTTP-SSL（安全套接层）" class="headerlink" title="HTTPS = HTTP + SSL（安全套接层）"></a>HTTPS = HTTP + SSL（安全套接层）</h2><p>HTTPS是以安全为目标的HTTP通道，可以理解为HTTP的安全版。</p><p>主要作用：建立一个信息安全通道，来确保数据的传输，并确保网站的真实性</p><h3 id="HTTPS的通信过程"><a href="#HTTPS的通信过程" class="headerlink" title="HTTPS的通信过程"></a>HTTPS的通信过程</h3><p>HTTPS通信时，首先建立ssl层的连接，客户端将ssl版本号和加密组件发到服务器端，服务器端收到后对ssl版本号和加密组件进行匹配，同时将CA证书及密钥发送到客户端。客户端对证书进行验证，验证通过后使用非对称加密对数据通信时的密钥进行协商。协商后得到一致的获得一致的对称加密密钥。然后使用对称加密算法进行TCP连接，后续的过程跟http的过程一致。三次握手，数据交换，四次挥手，通信结束。</p><p>过程如下:</p><ol><li><p>客户端和服务器端通过TCP建立连接。</p></li><li><p>客户端向服务器发送HTTPS请求。</p></li><li><p>服务器响应请求，并将数字证书发送给客户端，数字证书包括公共秘钥、域名、申请证书的公司。</p></li><li><p>客户端收到服务器端的数字证书之后，会验证数字证书的合法性。</p></li><li><p>如果公钥合格，那么客户端会生成一个用于进行对称加密的密钥client key，并用服务器的公钥对客户端密钥进行非对称加密。</p></li><li><p>客户端会发起HTTPS中的第二个HTTP请求，将加密之后的客户端密钥发送给服务器。</p></li><li><p>服务器接收到客户端发来的密文之后，会用私钥对其进行非对称解密，得到客户端秘钥。并使用客户端秘钥进行对称加密，生成密文并发送。</p></li><li><p>客户端收到密文，并使用客户端秘钥进行解密，渲染网页。</p></li></ol><p>HTTPS特点：  </p><ul><li><strong>内容加密</strong>：将数据包进行加密后再传输，中间者很难看到原始数据</li><li><strong>验证身份</strong>：通过证书认证客户端访问的是自己的服务器（证书需要向专门机构购买）</li><li><strong>保护数据完整性</strong>：防止传输的内容被中间人冒充或者篡改</li></ul><p>HTTPS缺点:</p><ul><li><p>HTTPS握手阶段比较费时</p></li><li><p>HTTPS缓存没有HTTP高效，而且会增加数据开销</p></li><li><p>SSL证书需要购买，强越大的证书越昂贵</p></li><li><p>SSL需要绑定IP，不能在同一个ip上绑定多域名，Ipv4支持不了这种消耗。</p></li></ul><h3 id="HTTP-和-HTTPS-的区别"><a href="#HTTP-和-HTTPS-的区别" class="headerlink" title="HTTP 和 HTTPS 的区别"></a>HTTP 和 HTTPS 的区别</h3><ul><li><p>安全性上，HTTPS是安全超文本协议，在HTTP基础上有更强的安全性。简单来说，HTTPS是使用TLS/SSL加密的HTTP协议(TLS和SSL差不多)</p></li><li><p>申请证书上，HTTPS需要使用ca申请证书</p></li><li><p>传输协议上, HTTP是超文本传输协议，明文传输；HTTPS是具有安全性的 SSL 加密传输协议</p></li><li><p>连接方式与端口上，http的连接简单，是无状态的，端口是 80； https 在http的基础上使用了ssl协议进行加密传输，端口是 443</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-图</title>
      <link href="/langblogs/posts/18.html"/>
      <url>/langblogs/posts/18.html</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-堆栈</title>
      <link href="/langblogs/posts/14.html"/>
      <url>/langblogs/posts/14.html</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 堆 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-散列表</title>
      <link href="/langblogs/posts/17.html"/>
      <url>/langblogs/posts/17.html</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 散列表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-树</title>
      <link href="/langblogs/posts/16.html"/>
      <url>/langblogs/posts/16.html</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-链表</title>
      <link href="/langblogs/posts/13.html"/>
      <url>/langblogs/posts/13.html</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构-链表"><a href="#数据结构-链表" class="headerlink" title="数据结构-链表"></a>数据结构-链表</h1>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-队列</title>
      <link href="/langblogs/posts/15.html"/>
      <url>/langblogs/posts/15.html</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-数组</title>
      <link href="/langblogs/posts/19.html"/>
      <url>/langblogs/posts/19.html</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构-数组"><a href="#数据结构-数组" class="headerlink" title="数据结构-数组"></a>数据结构-数组</h1><h2 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h2><p>物理结构：一种线性表数据结构，它用一组连续的内存空间来存储一组具有相同类型的数据(js特性:数组可以存储不同类型)</p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ul><li>高效的查询</li><li>通过索引实现随机存取</li></ul><h2 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h2><p>低效的插入与删除：</p><ul><li>数组执行插入或删除操作时，往往需要进行频繁的元素移动，开销过大</li></ul><h2 id="JavaScript中的数组"><a href="#JavaScript中的数组" class="headerlink" title="JavaScript中的数组"></a>JavaScript中的数组</h2><p>1.定义数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 1. 普通方式</span><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2. 指定长度</span><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3. 指定内容</span><span class="token keyword">const</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4. 使用[]</span><span class="token keyword">const</span> arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.长度与遍历</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 获取长度</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 4</span><span class="token comment">/* 遍历 */</span> <span class="token comment">// 1. 使用 for</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 2. 使用数组的 foreach(function) 函数</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3. 使用 for...in</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token keyword">in</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 4. 使用 for...of</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.插入元素</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* 添加元素  newValue*/</span><span class="token comment">// 1. 添加到任意位置(index)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&gt;</span> index<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> newValue<span class="token punctuation">;</span><span class="token comment">// 2. 数组末尾添加元素</span>arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> newValue<span class="token punctuation">;</span><span class="token comment">// 3. 使用数组的 push() 函数在数组末尾添加元素</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newValue1<span class="token punctuation">,</span> newValue2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4. 使用数组的 unshift() 函数在数组的开头添加元素</span>arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5. 使用数组的 spelice() 函数</span><span class="token keyword">let</span> arr6 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr6<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> newValue1<span class="token punctuation">,</span> newValue2<span class="token punctuation">,</span> newValue3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第一参数代表 插入位置的索引</span><span class="token comment">// [1, 2, newValue1, newValue2, newValue3, 3, 4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.删除元素</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS百分比布局小结</title>
      <link href="/langblogs/posts/23.html"/>
      <url>/langblogs/posts/23.html</url>
      
        <content type="html"><![CDATA[<h1 id="百分比布局"><a href="#百分比布局" class="headerlink" title="百分比布局"></a>百分比布局</h1><p>除了用px结合媒体查询实现响应式布局外，还可以通过百分比单位“%”来实现响应式的效果。</p><h2 id="百分比单位总结"><a href="#百分比单位总结" class="headerlink" title="百分比单位总结"></a>百分比单位总结</h2><table><thead><tr><th>子元素</th><th>父元素</th></tr></thead><tbody><tr><td>width</td><td>基于父元素的width</td></tr><tr><td>height</td><td>基于父元素的height</td></tr><tr><td>(top, bottom), (left, right)</td><td>基于父元素的height, width</td></tr><tr><td>margin(top, right, bottom, left)</td><td>基于父元素的width</td></tr><tr><td>padding(top, right, bottom, left)</td><td>基于父元素的width</td></tr><tr><td>font-size</td><td>基于继承得到的font-size</td></tr><tr><td>line-heught</td><td>基于当前字体的font-size</td></tr><tr><td>transform(left, top)</td><td>基于当前元素的left, top</td></tr></tbody></table><p><em>注意: border 设置百分比单位 为无效值</em></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring小结</title>
      <link href="/langblogs/posts/7.html"/>
      <url>/langblogs/posts/7.html</url>
      
        <content type="html"><![CDATA[<font color="yellow" size="4"><h1 id="Spring-Node"><a href="#Spring-Node" class="headerlink" title="Spring Node"></a>Spring Node</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>目的: 解决企业应用开发的复杂性</li><li>功能: 使用基本的JavaBean代替EJB(Enterprise Service Bus,), 并提供更多的企业应用功能<ul><li>ESB提供了连接企业内部及跨企业间新的和现有软件应用程序的功能，以一组丰富的功能启用管理和监控应用程序之间的交互。</li></ul></li><li>范围: 任何范围的Java应用</li></ul><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ol><li>非嵌入式: 基于Spring开发的应用中的对象可以不依赖Spring的API</li><li>控制反转(Ioc): 对象由Spring去创建, 不需要程序员去new</li><li>依赖注入(DI): 依赖的对象<strong>不需要手动</strong>调用setXXX()方法去设置, 而是通过配置赋值</li><li>面向切面(AOP)</li><li>Spring是一个容器, 其包含并且管理应用对象的生命周期</li><li>组件化: Spring可以实现使用简单的组件配置组合成衣蛾复杂的应用</li><li>一站式: 在IoC和AOP的基础上可以整合各种企业应用的开源框架和第三方类库</li></ol><ul><li>总结: Spring是一个轻量级控制反转(IOC)和面向切面(AOP)的容器框架</li></ul><h3 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h3><ul><li>表现层 –&gt; web层 (MVC是表现层的一个设计模型)</li><li>业务层 –&gt; service层</li><li>持久层 –&gt; dao层</li></ul><h2 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h2><h3 id="核心容器"><a href="#核心容器" class="headerlink" title="核心容器"></a>核心容器</h3><p>核心容器由 spring-core，spring-beans，spring-context，spring-context-support和spring-expression（SpEL，Spring 表达式语言，Spring Expression Language）等模块组成</p><p><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/03/20/z2keoLWXZ9r1iIx.png" alt="spring组成模块.png"></p><ul><li>Spring-core模块提供了框架的基本组成部分, 包括IoC和依赖注入</li><li>spring-beans 模块提供 BeanFactory，工厂模式的微妙实现，它移除了编码式单例的需要，并且可以把配置和依赖从实际编码逻辑中解耦</li><li>context 模块建立在由 core和 beans 模块的基础上建立起来的，它以一种类似于 JNDI 注册的方式访问对象。</li><li>spring-expression 模块提供了强大的表达式语言，用于在运行时查询和操作对象图。它是 JSP2.1 规范中定义的统一表达式语言的扩展，支持 set 和 get 属性值、属性赋值、方法调用、访问数组集合及索引的内容、逻辑算术运算、命名变量、通过名字从 Spring IoC 容器检索对象，还支持列表的投影、选择以及聚合等。</li></ul><p>其完整的依赖关系:</p><p><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/03/28/UsuicNKYH29k3Me.png" alt="image.png"></p><p>拓展:</p><ul><li><p>Spring Boot:  </p><ul><li>一个快速开发的脚手架</li><li>基于SpringBoot可以快速开发单个微服务</li></ul></li><li><p>Spring Cloud</p><ul><li>SpringCloud 是基于SpringBoot实现的微服务开发框架</li></ul></li></ul><p>依赖:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="IoC-容器"><a href="#IoC-容器" class="headerlink" title="IoC 容器"></a>IoC 容器</h2><p>容器将创建对象, 把它们连接在一起, 配置它们, 并管理它们的在整个生命周期.<br>通过阅读配置元数据提供的指令，容器知道对哪些对象进行实例化，配置和组装。配置元数据可以通过 XML，Java 注释或 Java 代码来表示。</p><h3 id="IOC理论推导"><a href="#IOC理论推导" class="headerlink" title="IOC理论推导"></a>IOC理论推导</h3><p>不使用Spring框架实现一个业务的准备工作:</p><ol><li>UserDao 接口</li><li>UserDaoImpl 实现类</li><li>UserService 业务接口</li><li>UserServiceImpl 业务实现</li></ol><p>弊端: 用户的需求可能会影响原来的代码, 如果直接根据用户需求去修改原来的代码, 在大型项目中, 这种修改成本非常昂贵</p><h3 id="IoC的本质"><a href="#IoC的本质" class="headerlink" title="IoC的本质"></a>IoC的本质</h3><p>控制反转IoC(Inversion of Control)是一种设计思想, DI(依赖注入)是实现IoC的一种方法, 没有IoC的程序中, 我们使用面向对象编程, 对象的创建与对象间的依赖完全写在程序中, 对象的创建由程序自己控制, 控制反转后将对象的创建转移给第三方(所以获得依赖对象的方式反转了)</p><p>控制反转是一种通过描述(XML或注解)并通过第三方去生产或获取特定对象的方式. 在spring中实现控制反转的是Ioc container, 其实现方法是注入依赖(Dependency Injection, DI)</p><p>控制:  谁来控制对象的创建, 传统应用程序的对象是由程序本身控制创建的, 使用Spring后,<strong>对象由Spring来创建</strong><br>反转: 程序本身不创建对象, 而变成被动的接收对象</p><p>依赖注入: 就是通过setXXX()方法来进行注入的</p><p>所以, 对IoC的理解: 对象的来创建, 管理, 装配由Spring来实现</p><h3 id="Spring-Bean"><a href="#Spring-Bean" class="headerlink" title="Spring Bean"></a>Spring Bean</h3><p>Bean 是一些被实例化, 组装,  并通过Spring IoC所管理的对象, 这些Bean是由容器提供的配置元数据创建的<br>Bean 定义常用的属性:</p><p>id: Bean 对象的唯一标识符<br>class: bean 对象所对应的全限定名<br>name: 别名, 可以同时区多个别名<br>scope: 指定特定的Bean定义创建对象的作用域</p><h3 id="Spring-定义元数据"><a href="#Spring-定义元数据" class="headerlink" title="Spring 定义元数据"></a>Spring 定义元数据</h3><p>Spring IoC容器完全由实际编写的配置元数据的格式解耦<br>把配置元数据提供给Spring容器:</p><ul><li><p>基于XML的配置文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans-3.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- A simple bean definition --&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- A bean definition with lazy init set on --&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">lazy-init</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>基于注解的配置</p></li><li><p>基于Java的配置</p></li></ul><h3 id="Spring-Bean-的作用域"><a href="#Spring-Bean-的作用域" class="headerlink" title="Spring Bean 的作用域"></a>Spring Bean 的作用域</h3><table><thead><tr><th>作用域</th><th>描述</th></tr></thead><tbody><tr><td>singleton(default)</td><td>在Spring IoC容器仅存在一个Bean实例，Bean以单例方式存在，默认值</td></tr><tr><td>prototype</td><td>每次从容器中调用Bean时，都返回一个新的实例，即每次调用getBean()时，相当于执行newXxxBean()</td></tr><tr><td>request</td><td>每次HTTP请求都会创建一个新的Bean，该作用域仅适用于WebApplicationContext环境</td></tr><tr><td>session</td><td>同一个HTTP Session共享一个Bean，不同Session使用不同的Bean，仅适用于WebApplicationContext环境</td></tr><tr><td>global-session</td><td>一般用于Portlet应用环境，该作用域仅适用于WebApplicationContext环境</td></tr></tbody></table><p>Singleton 是单例类型，就是在创建起容器时就同时自动创建了一个 bean 的对象，不管你是否使用，他都存在了，每次获取到的对象都是同一个对象。注意，Singleton 作用域是 Spring 中的缺省作用域</p><p>Prototype 是原型类型，它在我们创建容器的时候并没有实例化，而是当我们获取bean的时候才会去创建一个对象，而且我们每次获取到的对象都不是同一个对象</p><h3 id="Spring-Bean-生命周期"><a href="#Spring-Bean-生命周期" class="headerlink" title="Spring Bean 生命周期"></a>Spring Bean 生命周期</h3><p>初始化回调</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>exampleBean<span class="token punctuation">"</span></span>          <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>examples.ExampleBean<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>         <span class="token comment">&lt;!-- init是ExampleBean中的一个方法 --&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>销毁回调</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>exampleBean<span class="token punctuation">"</span></span>         <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>examples.ExampleBean<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>destroy<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>         <span class="token comment">&lt;!-- destroy是ExampleBean中的一个方法 --&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Spring-Bean-定义继承"><a href="#Spring-Bean-定义继承" class="headerlink" title="Spring Bean 定义继承"></a>Spring Bean 定义继承</h3><p>Spring Bean定义继承于java的继承无关, 但概念是一样的. 可以通过定义一个父Bean的定义作为模板和其他子Bean 就可以从bean中继承所需的配置.</p><p>使用基于XML的配置元数据时, 指定父Bean作为该属性的值来表明子Bean的定义</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Parent<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent message1<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent message2<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 使用parent属性建立Bean之间的继承关系  --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Child<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child message2<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message3<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child message3<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ApplicationContext</span> acx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"Bean.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Parent</span> parent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Parent</span><span class="token punctuation">)</span> acx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"parent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Child</span> child <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Child</span><span class="token punctuation">)</span> acx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"child"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Parent{message1='parent message1', message2='parent message2'}</span>        <span class="token comment">// Child{message1='parent message1', message2='child message2', message3='child message3'}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Spring的核心机制"><a href="#Spring的核心机制" class="headerlink" title="Spring的核心机制"></a>Spring的核心机制</h2><h3 id="管理bean"><a href="#管理bean" class="headerlink" title="管理bean"></a>管理bean</h3><p>程序主要是通过Spring容器来访问容器中的Bean, ApplicationContext是Spring容器最常用的接口,该interface有以下两个实现类:</p><ul><li><code>ClassPathXmlApplicationContext</code>: 从类加载路径下搜索配置文件, 并根据配置文件来创建Spring容器.</li><li><code>FileSystemXmlApplicationContext</code>: 从文件系统的相对路径或绝对路径下去搜索配置文件, 并根据配置文件来创建Spring容器</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建Spring上下文(加载bean.xml)得到Spring容器</span>        <span class="token class-name">ApplicationContext</span> acx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"spring-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 在Spring容器中获取Student实例</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> acx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用方法</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><p>Spring框架的核心功能:</p><ul><li>Spring容器作为超级工厂, 负责创建,管理所有的Java对象, 这些对象也就是容器中的Bean</li><li>Spring容器管理容器中Bean之间的依赖关系, Spring使用”依赖注入”来管理Bean之间的依赖关系</li></ul><p>依赖注入:</p><ul><li>依赖: Bean对象的创建依赖于容器</li><li>注入: Bean对象中的所有属性值, 由容器注入</li></ul><p>使用依赖注入, 不仅可以为Bean注入普通的属性值, 还可以注入其他Bean之间的依赖关系<br>依赖注入是一种优秀的解耦方式, 其可以让Bean以配置文件组织在一起, 而不是以硬编码的方式耦合在一起</p><p>依赖注入的方式:</p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Constructor-based dependency injection</td><td>当容器调用带有多个参数的构造函数类时，实现基于构造函数的 DI，每个代表在其他类中的一个依赖关系</td></tr><tr><td>Setter-based dependency injection</td><td>基于 setter 方法的 DI 是通过在调用无参数的构造函数或无参数的静态工厂方法实例化 bean 之后容器调用 beans 的 setter 方法来实现的</td></tr></tbody></table><h3 id="Spring-基于构造函数的依赖注入"><a href="#Spring-基于构造函数的依赖注入" class="headerlink" title="Spring 基于构造函数的依赖注入"></a>Spring 基于构造函数的依赖注入</h3><ol><li>使用无参构造器创建</li><li>使用有参构造 <pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"> <span class="token comment">&lt;!--  通过无参构造创建(必须声明类的无参构造函数)  --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.Human<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>human<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>human<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--  通过参数类型传递参数  --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.Human<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>human1<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>human1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>String<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.Student<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>human<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--  通过索引传入参数值(注意从零开始)  --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.Human<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>human2<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>human2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--  通过参数名称传入参数值  --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.Human<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>human3<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>human3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p><em>使用这种方式, 使用的类必须要定义构造函数</em></p><h3 id="Spring-基于设值函数的依赖注入"><a href="#Spring-基于设值函数的依赖注入" class="headerlink" title="Spring 基于设值函数的依赖注入"></a>Spring 基于设值函数的依赖注入</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example.Human<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>human1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example.Student<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>human<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>human1<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!-- 简写(注意 P 需要在beans 里面定义) --&gt;</span>   <span class="token comment">&lt;!--  xmlns:p="http://www.springframework.org/schema/p" --&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example.Student<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student2<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">p:</span>human-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>human1<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">p:</span>age</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>使用这种方式注入依赖, 使用的类必须定义setter方法</em></p><h3 id="两种依赖注入方式的对比"><a href="#两种依赖注入方式的对比" class="headerlink" title="两种依赖注入方式的对比"></a>两种依赖注入方式的对比</h3><p><strong>唯一的区别就是在基于构造函数注入中，我们使用的是〈bean〉标签中的〈constructor-arg〉元素，而在基于设值函数的注入中，我们使用的是〈bean〉标签中的〈property〉元素</strong></p><h3 id="Spring-注入集合"><a href="#Spring-注入集合" class="headerlink" title="Spring 注入集合"></a>Spring 注入集合</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- Definition for javaCollection --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javaCollection<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.tutorialspoint.JavaCollection<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token comment">&lt;!-- results in a setAddressList(java.util.List) call --&gt;</span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addressList<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>INDIA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>Pakistan<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>USA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>USA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>     <span class="token comment">&lt;!-- results in a setAddressSet(java.util.Set) call --&gt;</span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addressSet<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>INDIA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>Pakistan<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>USA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>USA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>     <span class="token comment">&lt;!-- results in a setAddressMap(java.util.Map) call --&gt;</span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addressMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INDIA<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Pakistan<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>USA<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>USA<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>     <span class="token comment">&lt;!-- results in a setAddressProp(java.util.Properties) call --&gt;</span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addressProp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>INDIA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Pakistan<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>three<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>USA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">&gt;</span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>four<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>USA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Spring-Bean-自动装配"><a href="#Spring-Bean-自动装配" class="headerlink" title="Spring Bean 自动装配"></a>Spring Bean 自动装配</h3><ul><li><p>使用<code>autowire="byName"</code> 自动装配: 这种模式由属性名称指定自动装配。Spring 容器看作 beans，在 XML 配置文件中 beans 的 auto-wire 属性设置为 byName。然后，它尝试将它的属性与配置文件中定义为相同名称的 beans 进行匹配和连接。如果找到匹配项，它将注入这些 beans，否则，它将抛出异常。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example.Human<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>human1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example.Student<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>human<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>human1<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 使用byName自动装配 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example.Human<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>human2<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>human<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example.Student<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student2<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用<code>autowire="byType"</code> 自动转配: 这种模式由属性类型指定自动装配。Spring 容器看作 beans，在 XML 配置文件中 beans 的 autowire 属性设置为 byType。然后，如果它的 type 恰好与配置文件中 beans 名称中的一个相匹配，它将尝试匹配和连接它的属性。如果找到匹配项，它将注入这些 beans，否则，它将抛出异常。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 使用byType自动装配 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example.Human<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>human<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example.Student<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student3<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Spring-基于注解的配置"><a href="#Spring-基于注解的配置" class="headerlink" title="Spring 基于注解的配置"></a>Spring 基于注解的配置</h2><p>使用注解来配置依赖注入, 可以使用相关类，方法或字段声明的注解，将 bean 配置移动到组件类本身。</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><p><code>&lt;alias&gt;</code></p><h3 id="Bean的配置"><a href="#Bean的配置" class="headerlink" title="Bean的配置"></a>Bean的配置</h3><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p>用于导入多个xml文件, 将各个文件中的bean合并</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2></font>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>池化技术</title>
      <link href="/langblogs/posts/10.html"/>
      <url>/langblogs/posts/10.html</url>
      
        <content type="html"><![CDATA[<font size="3" color="yellowgreen"><h1 id="池化技术"><a href="#池化技术" class="headerlink" title="池化技术"></a>池化技术</h1><h2 id="产生及目的"><a href="#产生及目的" class="headerlink" title="产生及目的"></a>产生及目的</h2><p>由于在实际应用中，分配内存、创建进程、线程都会涉及到一系列系统调用，而系统调用需要导致程序从用户态切换到内核态，是非常耗时的操作。</p><p>因此，当程序中需要频繁的进行内存申请释放，进程、线程创建销毁等操作时，通常会使用内存池、进程池、线程池技术来提升程序的性能。通过对连接或线程的复用，并对复用的数量、时间等进行控制，从而使得系统的性能和资源消耗达到最优状态。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>池化技术是一种常见的编程技巧, 把一些能够复用的东西（比如说数据库连接、线程）放到池中，避免重复创建、销毁的开销，从而极大提高性能。(提前保存大量资源, 以备不时之需)</p><p>常见的池化技术:</p><ul><li>线程池</li><li>内存池</li><li>数据库连接池</li><li>对象池</li></ul><p>共同特点: 把”昂贵的”, “费时的”的资源维护在一个特定的”池子里面”, 并且规定其规模, 阻塞队列等配置, 进行回收, 监控等一系列的统一管理</p><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>类似于操作系统中的缓冲区，它的流程如下：先启动若干数量的线程，并让这些线程都处于睡眠状态，当需要一个开辟一个线程去做具体的工作时，就会唤醒线程池中的某一个睡眠线程，让它去做具体工作，当工作完成后，线程又处于睡眠状态，而不是将线程销毁。</p><h2 id="内存池"><a href="#内存池" class="headerlink" title="内存池"></a>内存池</h2><p>内存池是指程序预先从操作系统申请一块足够大内存，此后，当程序中需要申请内存的时候，不是直接向操作系统申请，而是直接从内存池中获取；同理，当程序释放内存的时候，并不真正将内存返回给操作系统，而是返回内存池。当程序退出(或者特定时间)时，内存池才将之前申请的内存真正释放。</p><h2 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h2><h3 id="为什么使用连接池"><a href="#为什么使用连接池" class="headerlink" title="为什么使用连接池"></a>为什么使用连接池</h3><ul><li><p>每次打开/关闭数据库连接开销很大，连接池技术允许我们在连接池里维护连接对象，这样可以提高数据库的执行命令的性能。多个客户端请求可以重复使用相同的连接对象，当每次收到一个客户端请求时，就会搜索连接池，看看有没有闲置连接对象。如果没有，要么所有的客户端请求都进入队列排队，要么在池中创建一个新的连接对象（这取决于池里已有多少个连接存在以及配置支持多少连接)</p></li><li><p>一旦某个请求使用完连接对象之后，这个对象会被重新放入池中，然后会被重新分派给排队等待的请求（分派给哪个请求要看使用什么调度算法）。</p></li><li><p>因为大部分请求都是使用现存的连接对象，所以连接池技术大大减少了等待创建数据库连接的时间，从而减少了平均连接时间。</p></li><li><p>连接池允许多个客户端使用缓存起来的连接对象，这些对象可以连接数据库，它们是共享的、可被重复使用的</p></li></ul><p>数据库连接池是负责分配, 管理和释放数据库的连接, 它允许应用程序重复使用现有的数据库连接, 而不是重新建立一个.</p><h3 id="使用连接池需要关注的问题"><a href="#使用连接池需要关注的问题" class="headerlink" title="使用连接池需要关注的问题"></a>使用连接池需要关注的问题</h3><ul><li>并发问题</li><li>事务处理</li><li>连接池的分配和释放</li><li>连接池的配置和维护</li></ul><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>在系统初始化的时候将数据库连接作为对象存储在内存中，当用户需要访问数据库的时候，并非建立一个新的连接，而是从连接池中取出一个已建立的空闲连接对象。在使用完毕后，用户也不是将连接关闭，而是将连接放回到连接池中，以供下一个请求访问使用。这些连接的建立、断开都由连接池自身来管理。</p><p>同时，还可以设置连接池的参数来控制连接池中的初始连接数、连接的上下限数和每个连接的最大使用次数、最大空闲时间等。当然，也可以通过连接池自身的管理机制来监视连接的数量、使用情况等。</p><h3 id="最小连接数和最大连接数"><a href="#最小连接数和最大连接数" class="headerlink" title="最小连接数和最大连接数"></a>最小连接数和最大连接数</h3><p>这两个配置控制着从连接池中获取连接的流程:</p><ul><li>如果当前连接数小于最小连接数，则创建新的连接处理数据库请求</li><li>如果线程池中有空闲连接，则使用空闲连接</li><li>如果没有空闲连接，并且当前连接数小于最大连接数，则继续创建新的连接</li><li>如果当前连接数大于等于最大连接数，并且没有空闲连接了，则请求按照超时时间- 等待旧连接可用。、</li><li>超时之后，则获取数据库连接失败</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>减少内存碎片的产生</li><li>提高内存的使用频率</li></ol><p>缺点:</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>当请求较小时, 会造成内存的浪费</p></font>]]></content>
      
      
      <categories>
          
          <category> 编程技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程技巧 </tag>
            
            <tag> 连接池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lambda</title>
      <link href="/langblogs/posts/11.html"/>
      <url>/langblogs/posts/11.html</url>
      
        <content type="html"><![CDATA[<h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><h2 id="functional-Interface-函数式接口"><a href="#functional-Interface-函数式接口" class="headerlink" title="functional Interface(函数式接口)"></a>functional Interface(函数式接口)</h2><ul><li>定义: 任何只包含唯一一个抽象方法的接口,就是函数式接口</li><li>对于函数式接口,我们可以通过Lambda表达式来创建该接口的对象<br>代码演示:</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//推导Lambda表达式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLambda</span> <span class="token punctuation">{</span>    <span class="token comment">// 3.静态内部类</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Like2</span> <span class="token keyword">implements</span> <span class="token class-name">Ilike</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i like Lambda(static)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Ilike</span> like1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Like1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        like1<span class="token punctuation">.</span><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Ilike</span> like2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Like2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        like2<span class="token punctuation">.</span><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//  4.局部内部类</span>        <span class="token keyword">class</span> <span class="token class-name">Like3</span> <span class="token keyword">implements</span> <span class="token class-name">Ilike</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i like Lambda(inner)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">Ilike</span> like3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Like3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        like3<span class="token punctuation">.</span><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 5.匿名内部类</span>        <span class="token class-name">Ilike</span> like4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ilike</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i like Lambda(匿名内部类)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        like4<span class="token punctuation">.</span><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 6.用Lambda表达式简化</span>        <span class="token class-name">Ilike</span> like5 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i like Lambda(Lambda)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        like5<span class="token punctuation">.</span><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 1.定义一个接口函数</span><span class="token keyword">interface</span> <span class="token class-name">Ilike</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 2.实现类</span><span class="token keyword">class</span> <span class="token class-name">Like1</span> <span class="token keyword">implements</span> <span class="token class-name">Ilike</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i like Lambda"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>essay-life</title>
      <link href="/langblogs/posts/980.html"/>
      <url>/langblogs/posts/980.html</url>
      
        <content type="html"><![CDATA[<div class="ipage">    <div class="ititle">节选自《你若安好便是晴天》- 前言</div>    <div class="izhengwen">        <p>生活，有时感觉莫名的心烦。心烦的时候，最好的是沉默。</p>        <p>不必喝酒，出去走走，那小路和树林，那天空和海滩，那山风和淡云，就在身旁；</p>        <p>不必多怨，言多不逊，执一本书，在阳光下，微笑着面对一切，聆听一切；</p>        <p>不必伤怀，曲折有度，也许过了就算了，算了就消失了。</p>        <p>心烦，其实只是人的一种心情，看淡了，就习惯了。</p>        <p>生活，有时真的让人无语，令人心碎。</p>        <p>只是，既是自己选择的路，跪着也要走下去。</p>        <p>自己扛下的事，留着泪也要做好。</p>        <p>而有些情，舍不得也得放下，哪怕心再痛再苦。</p>        <p>其实，缘来缘去的个中滋味，只有岁月懂得，也只有自己深深懂得!</p>        <p>生活，有时候其实很简单。</p>        <p>生活，不过是一份发自内心的微笑；</p>        <p>是一种清淡如水的心态，对苦难，对幸福，对整个人生；</p>        <p>更是一本永远也读不完的书，有故事，有梦想，有难以言说的情怀。</p>        <p>倘若有天，在一个阳光温热的午后，树荫下，你会发现：净是如此美丽 !</p>        <p>亲爱的，很多时候不是生活抛弃了你，而是你抛弃了生活本身。</p>    </div></div>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 请相信生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS知识点</title>
      <link href="/langblogs/posts/4.html"/>
      <url>/langblogs/posts/4.html</url>
      
        <content type="html"><![CDATA[<h1 id="CSS3-查缺补漏"><a href="#CSS3-查缺补漏" class="headerlink" title="CSS3 查缺补漏"></a>CSS3 查缺补漏</h1><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><ul><li>浏览器样式前缀: 为了让CSS样式兼容, 需要将某些样式属性加上浏览器前缀<ul><li><code>-ms-</code> 兼容IE</li><li><code>-moz-</code> 兼容Firefox</li><li><code>-o-</code> 兼容Opera</li><li><code>-webkit-</code> 兼容Chrome和Safari</li></ul></li></ul><h2 id="颜色表示"><a href="#颜色表示" class="headerlink" title="颜色表示"></a>颜色表示</h2><ul><li>rgba()表示法, a表示alpha透明度, 1表示不透明, 0表示全透明.<ul><li>与opacity相比: rgba()设置透明不会影响子元素, opacity会影响子元素</li></ul></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>透明度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">        <span class="token selector">body</span> <span class="token punctuation">{</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'./image/眼镜1.jpg'</span><span class="token punctuation">)</span></span> no-repeat center<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">div</span> <span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 55%<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.box1</span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>100<span class="token punctuation">,</span> 174<span class="token punctuation">,</span> 235<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.box2</span> <span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>100<span class="token punctuation">,</span> 174<span class="token punctuation">,</span> 235<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">opacity</span><span class="token punctuation">:</span> 0.5<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.box3</span> <span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/01/26/W47zJalmhnPQCY3.png" alt="image.png"></p><ul><li>hsl()表示法: h色相, s饱和度, l明度</li><li>hsla()表示法: h色相, s饱和度, l明度, a透明度</li></ul><h2 id="部分特效"><a href="#部分特效" class="headerlink" title="部分特效"></a>部分特效</h2><h3 id="圆角-border-radius"><a href="#圆角-border-radius" class="headerlink" title="圆角(border-radius)"></a>圆角(border-radius)</h3><ul><li>四值表示法: 左上, 右上, 右下, 左下</li><li>单值表示法: 单位可以是像素,也可以是百分比</li><li>拆分表示法:<ul><li>左上: <code>border-top-left-radius</code></li><li>右上: <code>border-top-right-radius</code></li><li>右下: <code>border-bottom-right-radius</code></li><li>左下: <code>border-bottom-left-radius</code></li></ul></li><li>还可以为每个角单独设置两个临界边的半径<ul><li><code>border-top-left-radius: top边半径 left边半径;</code></li><li><code>border-top-right-radius: top边半径 right边半径;</code></li><li><code>border-bottom-right-radius: bottom边半径 right边半径;</code></li><li><code>border-bottom-left-radius: left边半径 left边半径;</code></li><li>也可以联合设置<ul><li><code>border-radius: 左上角top 右上角top 右下角bottom 左下角bottom / 左上角left 右上角right 右下角right 左下角left</code></li></ul></li></ul></li></ul><h3 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h3><h4 id="盒子阴影-box-shadow"><a href="#盒子阴影-box-shadow" class="headerlink" title="盒子阴影(box-shadow)"></a>盒子阴影(box-shadow)</h4><ul><li>box-shadow 属性把一个或多个下拉阴影添加到框上</li><li>语法: <code>box-shadow: h-shadow v-shadow blur spread color inset;</code><ul><li>h-shadow(必需的,水平阴影位置,允许负值)</li><li>v-shadow(必需的,垂直阴影位置,允许负值)</li><li>blur(可选,模糊距离)</li><li>spread(可选,阴影的大小)</li><li>color(可选,阴影颜色)</li><li>insert(可选,从外层的阴影(开始时)改变阴影内侧阴影); `</li></ul></li><li>属性值</li></ul><h4 id="文字阴影-text-shadow"><a href="#文字阴影-text-shadow" class="headerlink" title="文字阴影(text-shadow)"></a>文字阴影(text-shadow)</h4><ul><li>语法: <code>box-shadow: h-shadow v-shadow blur color i;</code></li></ul><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul><li>background-origin –&gt; 背景图起点, 第一张图片绘制的位置<ul><li>padding-box; –&gt; 内边距开始(default)</li><li>border-box; –&gt; 边框开始</li><li>content-box; –&gt; 内容框开始</li></ul></li><li>background-clip –&gt; 背景剪裁(背景色和背景图片)<ul><li>border-box; –&gt; 裁剪到边框盒(default)</li><li>padding-box; –&gt; 裁剪到内边距框</li><li>content-box: –&gt; 裁剪到内容区</li></ul></li><li>background-size –&gt; 背景尺寸<ul><li>像素表示法 (宽, 高)</li><li>百分比表示法 (整个大背景宽度的百分比, 高度一样)</li><li>单词表示法<ul><li>cover –&gt; 覆盖,尽可能覆盖盒子</li><li>contain –&gt; 容纳, 显示全部背景图片</li></ul></li></ul></li><li>多背景: 设置背景时,用逗号隔开<ul><li>背景重叠显示</li><li>其他单一属性也用逗号隔开, 按顺序一一对应</li></ul></li></ul><h3 id="渐变效果"><a href="#渐变效果" class="headerlink" title="渐变效果"></a>渐变效果</h3><h4 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h4><ul><li>linear-gradient() 函数用于创建一个表示两种或多种颜色线性渐变的<strong>图片</strong>。</li><li>渐变使用的是背景图片,不是背景色</li><li>创建一个线性渐变，需要指定两种颜色，还可以实现不同方向（指定为一个角度）的渐变效果，如果不指定方向，默认从下到上渐变。</li><li>语法: <code>background-image: linear-gradient(direction, color-stop1, color-stop2, ...);</code></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html">/* 从上到下，蓝色渐变到红色 */linear-gradient(blue, red); /* 渐变轴为45度，从蓝色渐变到红色 */linear-gradient(45deg, blue, red); /* 从右下到左上、从蓝色渐变到红色 */linear-gradient(to left top, blue, red); /* 从下到上，从蓝色开始渐变、到高度40%位置是绿色渐变开始、最后以红色结束 */linear-gradient(0deg, blue, green 40%, red);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>各浏览器第一个支持版本  <table><thead><tr><th>Safari</th><th>Chrome</th><th>FireFox</th><th>IE</th></tr></thead><tbody><tr><td>6.1</td><td>26.0</td><td>16.0</td><td>10.0</td></tr><tr><td>5.1 -webkit-</td><td>10.0 -webkit-</td><td>3.6 -moz-</td><td></td></tr></tbody></table></li></ul><h4 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h4><ul><li><p><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/01/26/S8KpzG4CRJjLB2t.png" alt="渐变.png"></p></li><li><p>radial-gradient()函数用径向渐变创建<strong>图片</strong></p></li><li><p>径向渐变由中心点定义</p></li><li><p>必须创建两个终止色</p></li><li><p>语法: <code>background-image: radial-gradient(shape size at position, start-color, ..., last-color);</code></p><ul><li>shape –&gt; 确定圆的类型<ul><li>ellipse; –&gt; 指定椭圆形的径向渐变(default)</li><li>circle; –&gt; 指定圆形的径向渐变</li></ul></li><li>size –&gt; 定义渐变的大小<ul><li>farthest-corner; –&gt; 指定径向渐变的半径长度为从圆心到离圆心最远的角(default)</li><li>closest-side; –&gt; 指定径向渐变的半径长度为从圆心到离圆心最近的边</li><li>closest-corner; –&gt; 指定径向渐变的半径长度为从圆心到离圆心最近的角</li><li>farthest-side; –&gt; 指定径向渐变的半径长度为从圆心到离圆心最远的边</li></ul></li><li>position –&gt; 定义渐变的位置<ul><li>center; –&gt; 设置中间为径向渐变圆心的纵坐标值</li><li>top; –&gt; 设置顶部为渐变圆心的纵坐标值</li><li>bottom; –&gt; 设置底部为渐变圆心的纵坐标值</li></ul></li></ul></li><li><p>各浏览器第一个支持版本  </p><table><thead><tr><th>Safari</th><th>Chrome</th><th>FireFox</th><th>IE</th></tr></thead><tbody><tr><td>6.1</td><td>26.0</td><td>16.0</td><td>10.0</td></tr><tr><td>5.1 -webkit-</td><td>10.0 -webkit-</td><td>3.6 -moz-</td><td></td></tr></tbody></table></li></ul><h3 id="过渡-变换和动画"><a href="#过渡-变换和动画" class="headerlink" title="过渡,变换和动画"></a>过渡,变换和动画</h3><h4 id="过渡基本形式"><a href="#过渡基本形式" class="headerlink" title="过渡基本形式"></a>过渡基本形式</h4><ul><li>元素从一种样式逐渐改变为另一种的效果</li><li>元素:hover(只要元素属性发送改变就可以使用过渡)</li><li>语法: <code>transition: all 2s linear 0s</code><ul><li>transition-property: 规定应用过渡的CSS属性的名称</li><li>transition-duration: 定义过渡效果花费的时间,默认为0</li><li>transition-timing-function: 规定切换效果的速度,默认为”ease”<ul><li>linear –&gt; 规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）。</li><li>ease –&gt; 规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）</li><li>ease-in –&gt; 规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）</li><li>ease-out –&gt; 规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）</li><li>ease-in–out –&gt; 规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）</li><li>cubic-bezier(n, n, n, n)</li></ul></li><li>transition-delay:规定过渡效果何时产生,默认为0</li></ul></li><li>注意： 如果未指定的期限，transition将没有任何效果，因为默认值是0。</li><li>IE10以前版本不支持过渡效果</li></ul><h3 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h3><h4 id="2D变换"><a href="#2D变换" class="headerlink" title="2D变换"></a>2D变换</h4><ul><li>通过transform实现</li><li>可以将元素旋转,缩放,移动,倾斜等</li><li>语法: <code>transform: none|transform-functions;</code><ul><li>transform:rotate(30deg) –&gt; 旋转<ul><li>旋转的方向的是顺时针</li></ul></li><li>transform:scale(2) –&gt; 缩放<ul><li>1-正无穷 (表示放大的倍数)</li><li>0-1 (表示缩小的倍数)</li></ul></li><li>transform:skew(10deg, 10deg) –&gt; 斜切<ul><li>水平斜切,垂直斜切</li></ul></li><li>transform:translate(100px, 100px)<ul><li>水平移动距离, 垂直移动距离</li></ul></li></ul></li><li>属性值可写多个函数</li></ul><h4 id="3D变换"><a href="#3D变换" class="headerlink" title="3D变换"></a>3D变换</h4><ul><li>通过transform实现</li></ul><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><ul><li>通过@keyframes实现</li><li>指定的变化时发生时使用％，或关键字”from”和”to”，这是和0％到100％相同。<ul><li>0％是开头动画，100％是当动画完成</li></ul></li><li>使用animation来控制动画的外观,可使用选择器来绑定动画</li><li>animation: –&gt; 调用动画<ul><li>语法: <code>animation: name duration timing-function delay iteration-count direction fill-mode play-state;</code></li></ul></li><li>语法: <code>@keyframes animationname {keyframes-selector {css-styles;}}</code><ul><li>keyframes-selector; –&gt; 动画持续的百分比<ul><li>0-100%</li></ul></li></ul></li><li>各浏览器第一个支持版本  <table><thead><tr><th>Safari</th><th>Chrome</th><th>FireFox</th><th>IE</th></tr></thead><tbody><tr><td>9.0</td><td>43.0</td><td>16.0</td><td>10.0</td></tr><tr><td>4.0 -webkit-</td><td>4.0 -webkit-</td><td>5.0 -moz-</td><td></td></tr></tbody></table></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS知识点</title>
      <link href="/langblogs/posts/3.html"/>
      <url>/langblogs/posts/3.html</url>
      
        <content type="html"><![CDATA[<h1 id="CSS查缺补漏"><a href="#CSS查缺补漏" class="headerlink" title="CSS查缺补漏"></a>CSS查缺补漏</h1><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="层叠样式表"><a href="#层叠样式表" class="headerlink" title="层叠样式表"></a>层叠样式表</h3><ul><li>Cascading style sheet</li><li>实现结构和样式分离</li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li>选择器</li><li>样式规则<ul><li>样式名</li><li>样式值</li></ul></li><li>对比HTML:<ul><li>html的键值规范: <code>key = 'value'</code></li><li>css的键值规范: <code>key: value;</code>(必须要用分号把不同属性隔开)</li></ul></li></ul><h3 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h3><ul><li>内联<ul><li>直接写在标签的style属性里面</li></ul></li><li>内嵌<ul><li>写在<code>&lt;style&gt;</code> 标签内</li></ul></li><li>外联<ul><li>使用<code>&lt;link&gt;</code> 标签引入独立的CSS文件</li><li>通过link引入的CSS文件是与HTML文件并行下载的</li></ul></li><li>导入式<ul><li>在 <code>&lt;style&gt;</code> 标签内,使用<code>@import url('css路径')</code> 引入外部独立的CSS文件</li><li>这种方式是在HTML加载完成后,才开始加载CSS文件的</li><li>也可以在CSS文件使用<code>@import url('css路径')</code>中导入</li></ul></li></ul><hr><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><h4 id="通配符选择器-–-gt"><a href="#通配符选择器-–-gt" class="headerlink" title="通配符选择器 –> *"></a>通配符选择器 –&gt; <code>*</code></h4><ul><li><p>对默认样式进行标准化</p></li><li><p>语法:</p> <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span> <span class="token punctuation">{</span>    CSS 样式<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="标签选择器-–-gt-element"><a href="#标签选择器-–-gt-element" class="headerlink" title="标签选择器 –> element"></a>标签选择器 –&gt; <code>element</code></h4><ul><li><p>设定某元素的样式</p></li><li><p>语法:</p> <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">element</span> <span class="token punctuation">{</span>    CSS 样式<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="class选择器"><a href="#class选择器" class="headerlink" title=".class选择器"></a><code>.class</code>选择器</h4><ul><li><p>类选择器允许以一种独立于文档元素的方式来指定样式。</p></li><li><p>语法:</p> <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.class</span> <span class="token punctuation">{</span>    CSS 样式<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="#id选择器"></a><code>#id</code>选择器</h4><ul><li><p>id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。</p></li><li><p>语法:</p> <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#id</span> <span class="token punctuation">{</span>    CSS 样式<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="兼容性-以上选择器相同"><a href="#兼容性-以上选择器相同" class="headerlink" title="兼容性(以上选择器相同)"></a>兼容性(以上选择器相同)</h4><ul><li>各浏览器第一个支持版本  <table><thead><tr><th>Safari</th><th>Chrome</th><th>FireFox</th><th>IE</th></tr></thead><tbody><tr><td>1.0</td><td>1.0</td><td>1.0</td><td>5.0</td></tr></tbody></table></li></ul><hr><h3 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h3><h4 id="交集选择器-–-gt-element-class-或者-element-id"><a href="#交集选择器-–-gt-element-class-或者-element-id" class="headerlink" title="交集选择器 –> element.class 或者 element#id"></a>交集选择器 –&gt; <code>element.class</code> 或者 <code>element#id</code></h4><ul><li>交集选择器,匹配指定标签间的共有部分</li><li><code>p.first</code> –&gt; 匹配class为first的P标签(id类似)</li></ul><h4 id="并集选择器-–-gt-element1-element2-element3"><a href="#并集选择器-–-gt-element1-element2-element3" class="headerlink" title="并集选择器 –> element1, element2, element3..."></a>并集选择器 –&gt; <code>element1, element2, element3...</code></h4><ul><li>并集选择器，匹配所有满足的标签</li></ul><h4 id="后代选择器-–-gt-element1-element2"><a href="#后代选择器-–-gt-element1-element2" class="headerlink" title="后代选择器 –> element1 element2"></a>后代选择器 –&gt; <code>element1 element2</code></h4><ul><li>后代选择器，匹配element1元素内部的element2元素</li></ul><h4 id="子元素选择器-–-gt-element1-gt-element2"><a href="#子元素选择器-–-gt-element1-gt-element2" class="headerlink" title="子元素选择器 –> element1>element2"></a>子元素选择器 –&gt; <code>element1&gt;element2</code></h4><ul><li>后代选择器，匹配element1元素中符合直接子元素的element2元素</li><li>注意: 如果元素不是父元素的直接子元素，则不会被选择</li></ul><h4 id="相邻兄弟元素选择器-–-gt-element1-element2"><a href="#相邻兄弟元素选择器-–-gt-element1-element2" class="headerlink" title="相邻兄弟元素选择器 –> element1 + element2"></a>相邻兄弟元素选择器 –&gt; <code>element1 + element2</code></h4><ul><li>相邻兄弟元素选择器，匹配具有相同父元素且同级的element1相邻的element2元素</li></ul><h4 id="通用兄弟元素选择器-–-gt-element1-element2"><a href="#通用兄弟元素选择器-–-gt-element1-element2" class="headerlink" title="通用兄弟元素选择器 –> element1 ~ element2"></a>通用兄弟元素选择器 –&gt; <code>element1 ~ element2</code></h4><ul><li>相邻兄弟元素选择器，匹配具有相同父元素且同级的element1之后的element2元素</li><li>注意: 两种元素必须要具有相同的父元素,但是element2不必紧随element1元素</li></ul><h4 id="语法-以上选择器语法相同"><a href="#语法-以上选择器语法相同" class="headerlink" title="语法(以上选择器语法相同)"></a>语法(以上选择器语法相同)</h4>   <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">element1 ~ element2</span><span class="token punctuation">{</span>    CSS 样式<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="兼容性-以上选择器兼容性相同"><a href="#兼容性-以上选择器兼容性相同" class="headerlink" title="兼容性(以上选择器兼容性相同)"></a>兼容性(以上选择器兼容性相同)</h4><ul><li>各浏览器第一个支持版本  <table><thead><tr><th>Safari</th><th>Chrome</th><th>FireFox</th><th>IE</th></tr></thead><tbody><tr><td>1.0</td><td>1.0</td><td>1.0</td><td>5.0</td></tr></tbody></table></li></ul><hr><h3 id="属性选择器-–-gt-具有特定属性的HTML样式"><a href="#属性选择器-–-gt-具有特定属性的HTML样式" class="headerlink" title="属性选择器 –> 具有特定属性的HTML样式"></a>属性选择器 –&gt; 具有特定属性的HTML样式</h3><ul><li>IE7和IE8需声明!DOCTYPE才支持属性选择器！IE6和更低的版本不支持属性选择器。</li><li>注意区分属性值为单值和多值的情况</li></ul><h4 id="attribute-选择器"><a href="#attribute-选择器" class="headerlink" title="[attribute] 选择器"></a><code>[attribute]</code> 选择器</h4><ul><li>用于选取带有指定属性的元素</li></ul><h4 id="attribute-value-选择器"><a href="#attribute-value-选择器" class="headerlink" title="[attribute=value] 选择器"></a><code>[attribute=value]</code> 选择器</h4><ul><li>用于选取属性值为value的元素</li><li>注意: 属性值必须唯一,且为value</li></ul><h4 id="attribute-value"><a href="#attribute-value" class="headerlink" title="[attribute*=value]"></a><code>[attribute*=value]</code></h4><ul><li>用于选取属性值中能<strong>拆分</strong>出value的元素</li><li>包含value</li><li>例如: <code>title="abbvaluec"</code> –&gt; 成功</li></ul><h4 id="attribute-value-选择器-1"><a href="#attribute-value-选择器-1" class="headerlink" title="[attribute~=value] 选择器"></a><code>[attribute~=value]</code> 选择器</h4><ul><li>用于选取属性值中<strong>包含独立</strong>单词为value,且该单词周围无”-“的元素</li><li>包含value</li><li>例如:<ul><li><code>title="a value b"</code> –&gt; 正确</li><li><code>title="a-value  value-b"</code> –&gt; 错误</li></ul></li></ul><h4 id="attribute-value-选择器-2"><a href="#attribute-value-选择器-2" class="headerlink" title="[attribute|=value] 选择器"></a><code>[attribute|=value]</code> 选择器</h4><ul><li>用于选取属性值<strong>完整且唯一</strong>的单词为value,或该单词后跟随以”-“分割的元素</li><li>注意: value必须唯一且以value开头</li><li>例如<ul><li><code>title=" value "</code> / <code>title=" value-b"</code>–&gt; 正确</li><li><code>title="a value b"</code> –&gt; 错误</li></ul></li></ul><h4 id="attribute-value-选择器-3"><a href="#attribute-value-选择器-3" class="headerlink" title="[attribute^=value] 选择器"></a><code>[attribute^=value]</code> 选择器</h4><ul><li>用于选取属性值以value开头的元素</li><li>开头几个字母为value就可以</li><li>例如:  <code>title="valuezzzzz"</code> –&gt; 成功</li></ul><h4 id="attribute-value-选择器-4"><a href="#attribute-value-选择器-4" class="headerlink" title="[attribute$=value] 选择器"></a><code>[attribute$=value]</code> 选择器</h4><ul><li>用于选取属性值以value结尾的元素</li><li>例如:  <code>title="zzzzzvalue"</code> –&gt; 成功</li></ul><h4 id="语法-以上选择器语法相同-1"><a href="#语法-以上选择器语法相同-1" class="headerlink" title="语法 (以上选择器语法相同)"></a>语法 (以上选择器语法相同)</h4>   <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">[attribute=value]</span><span class="token punctuation">{</span>    CSS 样式<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="兼容性-以上选择器兼容性相同-1"><a href="#兼容性-以上选择器兼容性相同-1" class="headerlink" title="兼容性 (以上选择器兼容性相同)"></a>兼容性 (以上选择器兼容性相同)</h4><ul><li>各浏览器第一个支持版本  <table><thead><tr><th>Safari</th><th>Chrome</th><th>FireFox</th><th>IE</th></tr></thead><tbody><tr><td>1.0</td><td>1.0</td><td>1.0</td><td>7.0</td></tr></tbody></table></li></ul><h3 id="伪类选择器-Pseudo-classes"><a href="#伪类选择器-Pseudo-classes" class="headerlink" title="伪类选择器(Pseudo-classes)"></a>伪类选择器(Pseudo-classes)</h3><ul><li><p>CSS伪类是用来向某些选择器添加特殊效果。</p></li><li><p>理解: 是类,作用于标签本身(状态)</p></li><li><p>语法</p>  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">selector:pseudo-class</span> <span class="token punctuation">{</span><span class="token property">property</span><span class="token punctuation">:</span>value<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>CSS类也可以使用伪类：</p>  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">selector.class:pseudo-class</span> <span class="token punctuation">{</span><span class="token property">property</span><span class="token punctuation">:</span>value<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="link-选择器"><a href="#link-选择器" class="headerlink" title=":link 选择器"></a><code>:link</code> 选择器</h4><ul><li>向未访问过的链接添加样式</li><li>常用于 <code>&lt;a&gt;</code>标签</li></ul><h4 id="visited"><a href="#visited" class="headerlink" title=":visited"></a><code>:visited</code></h4><ul><li>向已经访问过的链接添加样式</li><li>常用于 <code>&lt;a&gt;</code>标签</li></ul><h4 id="hover"><a href="#hover" class="headerlink" title=":hover"></a><code>:hover</code></h4><ul><li>添加当鼠标悬停在元素上的样式</li><li><code>a:hover</code> 必须被置于 <code>a:link</code> 和 <code>a:visited</code> 之后，才是有效的。</li><li>常用于 <code>&lt;a&gt;</code>标签</li></ul><h4 id="active"><a href="#active" class="headerlink" title=":active"></a><code>:active</code></h4><ul><li>添加点击链接时的样式</li><li><code>a:active</code> 必须被置于 <code>a:hover</code> 之后，才是有效的。</li><li>常用于 <code>&lt;a&gt;</code>标签</li></ul><h4 id="focus"><a href="#focus" class="headerlink" title=":focus"></a><code>:focus</code></h4><ul><li>选取具有焦点的元素</li><li>常用与<code>&lt;input&gt;</code>标签</li><li>:focus 选择器选择器在IE8中必须声明&lt;!DOCTYPE&gt; .</li><li>各浏览器第一个支持版本  <table><thead><tr><th>Safari</th><th>Chrome</th><th>FireFox</th><th>IE</th></tr></thead><tbody><tr><td>3.1</td><td>4.0</td><td>2.0</td><td>8.0</td></tr></tbody></table></li></ul><h4 id="first-child"><a href="#first-child" class="headerlink" title=":first-child"></a><code>:first-child</code></h4><ul><li>匹配父元素的第一个子元素的元素</li><li>各浏览器第一个支持版本  <table><thead><tr><th>Safari</th><th>Chrome</th><th>FireFox</th><th>IE</th></tr></thead><tbody><tr><td>3.1</td><td>4.0</td><td>3.0</td><td>7.0</td></tr></tbody></table></li><li><code>:first-child</code>在IE8和更早版本IE版本中必须声明<code>&lt;!DOCTYPE&gt;</code></li></ul><h4 id="last-child"><a href="#last-child" class="headerlink" title=":last-child"></a><code>:last-child</code></h4><ul><li>匹配父元素的最后一个子元素</li><li>各浏览器第一个支持版本  <table><thead><tr><th>Safari</th><th>Chrome</th><th>FireFox</th><th>IE</th></tr></thead><tbody><tr><td>3.2</td><td>4.0</td><td>3.5</td><td>9.0</td></tr></tbody></table></li></ul><h4 id="only-child"><a href="#only-child" class="headerlink" title=":only-child"></a><code>:only-child</code></h4><ul><li>匹配属于父元素中唯一的子元素的元素</li><li>例如: <code>p:first-child</code> –&gt; 匹配到的<code>&lt;p&gt;</code>是其父元素的唯一子元素(独生子)</li><li>各浏览器第一个支持版本  <table><thead><tr><th>Safari</th><th>Chrome</th><th>FireFox</th><th>IE</th></tr></thead><tbody><tr><td>3.2</td><td>4.0</td><td>3.5</td><td>9.0</td></tr></tbody></table></li></ul><h4 id="nth-child-n"><a href="#nth-child-n" class="headerlink" title=":nth-child(n)"></a><code>:nth-child(n)</code></h4><ul><li>匹配父元素中第n个元素</li><li>n 可以是一个数字, 一个关键字, 或者一个公式</li><li>各浏览器第一个支持版本  <table><thead><tr><th>Safari</th><th>Chrome</th><th>FireFox</th><th>IE</th></tr></thead><tbody><tr><td>3.2</td><td>4.0</td><td>3.5</td><td>9.0</td></tr></tbody></table></li></ul><h4 id="nth-last-child-n"><a href="#nth-last-child-n" class="headerlink" title=":nth-last-child(n)"></a><code>:nth-last-child(n)</code></h4><ul><li>匹配其父元素的倒数第n个元素</li></ul><h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h3><ul><li>CSS 伪元素用于将特殊效果添加到某些选择器中</li><li>理解:首先是元素,且作用于内容本身</li><li>版本<ul><li>CSS2语法: 一个冒号</li><li>CSS3语法: 两个冒号</li></ul></li></ul><h4 id="before"><a href="#before" class="headerlink" title=":before"></a><code>:before</code></h4><ul><li>向选定的元素前添加内容</li><li>使用content属性来设置要插入的内容</li><li>各浏览器第一个支持版本  <table><thead><tr><th>Safari</th><th>Chrome</th><th>FireFox</th><th>IE</th></tr></thead><tbody><tr><td>3.1</td><td>4.0</td><td>2.0</td><td>9.0(部分从8.0)</td></tr></tbody></table></li></ul><h4 id="after"><a href="#after" class="headerlink" title=":after"></a><code>:after</code></h4><ul><li>向选定的元素后添加内容</li><li>使用content属性来设置要插入的内容</li><li>各浏览器第一个支持版本  <table><thead><tr><th>Safari</th><th>Chrome</th><th>FireFox</th><th>IE</th></tr></thead><tbody><tr><td>3.1</td><td>4.0</td><td>2.0</td><td>9.0(部分从8.0)</td></tr></tbody></table></li></ul><h4 id="first-letter"><a href="#first-letter" class="headerlink" title=":first-letter"></a><code>:first-letter</code></h4><ul><li>设置指定元素第一个字母的样式</li><li>仅适用于块级元素中,常用与<code>&lt;p&gt;</code>标签</li><li>兼容性<ul><li>IE 5.5-8 和 Opera4-6只支持旧的语法标准,CSS2语法(:first-letter)  </li><li>新版本支持的语法标准,双引号CSS3语法(::first-letter)</li></ul></li></ul><h4 id="first-line"><a href="#first-line" class="headerlink" title=":first-line"></a><code>:first-line</code></h4><ul><li>设置指定元素第一行的样式</li><li>仅适用于块级元素中,常用与<code>&lt;p&gt;</code>标签</li><li>各浏览器第一个支持版本  <table><thead><tr><th>Safari</th><th>Chrome</th><th>FireFox</th><th>IE</th></tr></thead><tbody><tr><td>1.0</td><td>1.0</td><td>1.0</td><td>5.5</td></tr></tbody></table></li></ul><h4 id="selection"><a href="#selection" class="headerlink" title="::selection"></a><code>::selection</code></h4><ul><li>匹配元素中被用户选中或处于高亮状态的部分</li><li>只可以应用少数的CSS属性:<ul><li>color</li><li>background</li><li>cursor</li><li>outline</li></ul></li><li>IE9, Opera, Chrome, Safari 支持 <code>::selection</code>选择器</li><li>Firefox 通过其私有属性<code>::moz-selection</code>支持</li></ul><h2 id="继承与层叠"><a href="#继承与层叠" class="headerlink" title="继承与层叠"></a>继承与层叠</h2><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><ul><li>CSS中父级元素的有些属性可以被后代元素继承</li><li>可以被继承的属性:<ul><li>文字属性:<ul><li>color</li><li>font-xxx</li><li>line-xxx</li><li>text-xxx</li></ul></li></ul></li><li>注意: 只有文字属性可以被继承(面试可能会问)</li></ul><h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><ul><li>多组选择器的样式作用在同一元素上</li><li>规则:<ul><li>如果选中了这个元素,比较各个选择器的权重</li><li>如果没有选中,看继承性(其权重为0,不能进行权重的比较)</li></ul></li></ul><h3 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h3><ul><li>权值: 选择器的针对性越强,权值越高<ul><li>权值排序: !important &gt; 行内样式 &gt; id &gt; 类|伪类|属性 &gt; 标签 &gt;通配符</li></ul></li><li>权重越高,优先级越高</li></ul><h3 id="important-关键字"><a href="#important-关键字" class="headerlink" title="!important 关键字"></a><code>!important</code> 关键字</h3><ul><li>使用: 直接写在CSS样式后面,来提高权重(其权重最大)</li><li>important其针对的是单个属性,而不是选择器</li><li>语法</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">selector</span> <span class="token punctuation">{</span>  /* 使priority这个属性的权值最大  <span class="token property">priority</span><span class="token punctuation">:</span> value<span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="样式渲染规则"><a href="#样式渲染规则" class="headerlink" title="样式渲染规则"></a>样式渲染规则</h3><p><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/01/01/fEzj6ADY3d1vaOC.png" alt="选择器渲染规则.png"></p><h2 id="文字与排版"><a href="#文字与排版" class="headerlink" title="文字与排版"></a>文字与排版</h2><h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><h4 id="颜色表示"><a href="#颜色表示" class="headerlink" title="颜色表示"></a>颜色表示</h4><ul><li>十六进制表示法<ul><li>语法: # + 六位十六进制</li><li>#000000 –&gt; 黑色(#000), #FFFFFF –&gt; 白色(#fff)</li><li>#FF0000 –&gt; 红色(#f00), #00FF00 –&gt; 绿色(#0f0), #0000FF –&gt; 蓝色(#00f)</li></ul></li><li>rgb(r, g, b)表示法<ul><li>r –&gt; red, g –&gt; green, b –&gt; blue</li><li>rgb(256,256,256) –&gt;白色, rgb(0,0,0) –&gt; 黑色</li><li>括号里面的数可以用百分比来表示</li></ul></li><li>rgba(r,g,b,a)表示法<ul><li>可以简化为rgb(r, g, b, a)</li><li>a(Alpha)设置透明度,取值在(0,1)</li></ul></li><li>颜色单词表示法</li></ul><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/01/01/MXOHwRyfWu68S3g.png" alt="字体.png"></p><ul><li>字型<ul><li>通用字型系列 –&gt; 拥有相似外观的字体系统组合 (如 “Serif” 或 “Monospace”)</li><li>特定字体系列 - 一个特定的字体系列(如 “Times” 或 “Courier”)</li></ul></li><li>color</li><li>font-size –&gt; 默认16px</li><li>font-family –&gt; 设置文本字体<ul><li>调用规则: 英文字体写在前面,使用的中文字体写在后面,最后一个写备用字体,字体用英文的双引号包裹,字体间用逗号隔开,网页有时追求加载速度,将中文字体写成英语单词</li><li>应该设置几个字体名称作为一种”后备”机制，如果浏览器不支持第一种字体，他将尝试下一种字体。</li></ul></li><li>font-style –&gt; 设置字体风格(italic –&gt; 斜体, normal)</li><li>font-weight –&gt; 加粗效果(100到900之间的整百数, bold(bolder lighter normal))</li><li>line-height –&gt; 设置行高(注意属性值是否带有单位)</li></ul><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><ul><li>text-decoration –&gt; 文本相关的样式属性<ul><li>underline</li><li>overline(上划线)</li><li>line-through(删除线)</li><li>none(清楚文本样式)</li></ul></li><li>text-indent –&gt; 文本首行缩进<ul><li>属性值: 数字 + em; (1em –&gt; 一个字符)</li></ul></li><li>text-align –&gt; 文本对齐方式<ul><li>left</li><li>center</li><li>right</li><li>justify(分散对齐)</li></ul></li><li>letter-spacing –&gt; 设置字符间的间距(字符间距)</li><li>word-spacing –&gt; 设置c词与词之间的间距(常用设置英文段落,英文单词之间的)</li><li>vertical-align –&gt; 设置同一行内行内元素垂直对齐方式<ul><li>base-line(default)</li><li>middle</li><li>top</li><li>bottom</li><li>(n)px</li></ul></li><li>white-space –&gt; 指定元素内的空白怎样处理.<ul><li>normal (default 空白会被忽略)</li><li>pre (空白会被保留)</li><li>nowarp (文本不会换行)</li><li>pre-wrap (保留空白,但正常换行)</li><li>pre-line (合并空白,保留换行符)</li></ul></li><li>text-overflow (当文本溢出包含元素时发生的事情)<ul><li>clip (修剪文本)</li><li>ellipsis (溢出隐藏,显示省略符号)</li></ul></li></ul><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><ul><li>盒子模型:<ul><li><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2020/12/29/OGfkTgFQ85ARNuV.png" alt="标准盒子模型.png"></li><li><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2020/12/29/IQGPska2BzApNv5.png" alt="IE(怪异)盒子模型.png"></li></ul></li><li>有些情况下高度可以不用设置,有由内容来撑开</li><li><code>box-sizing</code> 属性<ul><li>content-box：指定盒模型为W3C标准模型，设置border，padding会增加元素width与height的尺寸，即border与padding相当于是元素的“殖民地”，元素的“土地”，尺寸会增加，为更长延伸。(外扩)</li><li>border-box：指定盒模型为IE模型（怪异模式），设置border，padding不会影响元素width与height的尺寸，即border与padding由元素已建立空间转变。即空间还是这个空间，只是将部分空余的地方，转变变为其他空间用法而已，为内部转变。(内减)</li></ul></li><li>通过设置<code>box-sizing</code> 属性来切换标准盒子和怪异盒子</li><li>margin 合并<ul><li>当两个垂直(margin-top / margin-bottom)外边距相遇时，它们将形成一个外边距。 合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。</li><li>第一种情况(兄弟之间)<ul><li><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/01/09/WyAeZLKto9cb1Os.png" alt="margin合并1.png"></li></ul></li><li>第二种情况(后代元素和祖先元素,后代元素全都合并到祖先元素上)<ul><li><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/01/09/noitrOIXT3kDbLz.png" alt="margin合并2.png"></li></ul></li><li>解决:<ul><li>父元素设置padding/border</li><li>定位父元素</li><li>父元素设置 overflow(hidden)属性</li></ul></li><li>第三种情况(自身合并)<ul><li><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/01/09/iDozYlyb16RgqFr.png" alt="合并3.png"></li><li><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2021/01/09/EDs9WXJq4vHZUji.png" alt="合并4.png"></li></ul></li></ul></li><li>margin,padding 属性值使用百分比时,是相对于父元素的宽度</li></ul><h2 id="文档流"><a href="#文档流" class="headerlink" title="文档流"></a>文档流</h2><h3 id="标准文档流"><a href="#标准文档流" class="headerlink" title="标准文档流"></a>标准文档流</h3><ul><li>文档流指的是元素排版布局过程中，元素会默认自动从左往右，从上往下的流式排列方式。并最终窗体自上而下分成一行行，并在每行中从左至右的顺序排放元素。</li><li>标准文档流的微观现象:<ul><li>空白折叠现象</li><li>高矮不齐,底边对齐(baseline基线)</li><li>文本内容超过容器宽度,自动换行</li></ul></li><li>HTML规则分类标签<ul><li>文本级(p, span, a, b, i ,u ,em)</li><li>容器级(div, h(n), li, dt ,dd )</li></ul></li><li>标准文档流分类标签:<ul><li>块级元素(即容器级)<ul><li>独占一行</li><li>能设置宽高</li><li>默认宽度为父元素的100%,默认高度为0</li></ul></li><li>行内级元素(级文本级)<ul><li>不独占一行,与其他元素从左到右并排</li><li>不能设置宽度,默认的宽度就是文字的宽度</li><li>可设置背景色</li><li>可利用 display(block) 属性将行内转级化为块级</li></ul></li><li>行内块级元素(img, textarea, input)<ul><li>可以设置宽高,但与其他行内元素在同一行从左到右并排</li><li>容器默认包裹内容,如果设置了宽高,那么容器范围为宽高的大小</li></ul></li><li><code>&lt;p&gt;</code> 虽然是个文本级元素,但却是一个块级元素</li></ul></li></ul><h3 id="脱离标准文档流"><a href="#脱离标准文档流" class="headerlink" title="脱离标准文档流"></a>脱离标准文档流</h3><ol><li>浮动</li><li>绝对定位</li><li>固定定位</li></ol><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><h3 id="Float"><a href="#Float" class="headerlink" title="Float"></a>Float</h3><ul><li>CSS的Float(浮动),会使元素向左或向右移动,其周围的元素也会重新排列</li><li>脱离文本流</li><li>往往用于图像的排版</li><li>内容让出,但元素为让出</li></ul><h3 id="浮动规则"><a href="#浮动规则" class="headerlink" title="浮动规则"></a>浮动规则</h3><ul><li>元素的水平方向移动,意味着元素只能左右移动而不能上下移动</li><li>一个浮动元素会尽量向左或向右移动,直到它的边缘碰到人包含框或者另一个浮动框为止</li><li>浮动元素之后的元素将包围它</li><li>浮动元素之前的元素不收影响</li><li>不存在margin合并的问题</li></ul><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><ul><li>元素浮动之后，周围的元素会重新排列，为了避免这种情况，使用<code>clear</code>属性。</li><li>clear(left/right/both) 属性指定元素两侧不能出现浮动元素。</li></ul><h3 id="浮动造成的高度塌陷"><a href="#浮动造成的高度塌陷" class="headerlink" title="浮动造成的高度塌陷"></a>浮动造成的高度塌陷</h3><ul><li>当不给父元素设置宽高时，父元素的宽高会被子元素的内容撑开。但是当子元素设置浮动属性后，子元素会溢出到父元素外，父元素的宽高也不会被撑开了，称之为“高度塌陷”。</li><li>解决高度塌陷<ol><li>给父元素设置 overflow(hidden)属性(溢出剪切)</li><li>使用:after伪元素(给元素末尾添加内容)</li></ol></li></ul><h3 id="margin-对浮动元素的影响"><a href="#margin-对浮动元素的影响" class="headerlink" title="margin 对浮动元素的影响"></a>margin 对浮动元素的影响</h3><ul><li>注意贴边的条件(直到它的边缘碰到人包含框或者另一个浮动框为止)</li></ul><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><h3 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h3><ul><li>单行文本居中<ul><li>水平方向<ul><li>text-align(center)</li></ul></li><li>垂直方向<ul><li>设置行高与高度一致(line-height=height)</li></ul></li></ul></li><li>多行文本在盒子中垂直居中(盒子不给高度,用上下padding挤出来)<ul><li>水平方向<ul><li>text-align(center)</li></ul></li><li>垂直方向<ul><li>设置容器的padding</li></ul></li></ul></li><li>盒子在父盒子内水平居中<ul><li>设置盒子的margin(0 auto)</li></ul></li><li>盒子在父盒子内垂直居中<ul><li>已知父盒子的高度,设置盒子的margin-top</li><li>未知父元素的高度,设置盒子的padding</li></ul></li><li>表格项内容居中<ul><li>设置<code>&lt;th&gt;</code>的align(center)属性</li></ul></li><li>借助于表格特征,可以将单行文本,多行文本,行内元素,块元素,行内块元素实现居中<br>例如</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>利用表格居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">        <span class="token selector">.container</span> <span class="token punctuation">{</span>            <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 2px solid red<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>            <span class="token comment">/* 水平居中 */</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token comment">/* 垂直居中 */</span>            <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">img</span> <span class="token punctuation">{</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.box1</span> <span class="token punctuation">{</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px dashed gold<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./草地3.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>行内块级元素<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>块级元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>行内级 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span> 元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./medias/detail/load.gif" data-original="https://img-blog.csdnimg.cn/20210110220147448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0MDQ1NTE5,size_16,color_FFFFFF,t_70" alt="效果图"></p><h3 id="隐藏元素"><a href="#隐藏元素" class="headerlink" title="隐藏元素"></a>隐藏元素</h3><ol><li><code>display: none;</code> –&gt; 元素消失,不保留原有空间</li><li><code>visibility: hidden;</code> –&gt; 设置元素能见度(hidden),元素消失,保留原有空间</li><li><code>opacity: 0;</code> –&gt; 设置元素的不透明度(0), 元素消失,保留原有空间</li></ol><p>举例:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>隐藏元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">        <span class="token selector">.container</span> <span class="token punctuation">{</span>            <span class="token property">height</span> <span class="token punctuation">:</span> 420px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 110px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 2px solid red<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">div</span> <span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.box1</span> <span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.box2</span> <span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> yellowgreen<span class="token punctuation">;</span>            <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.box3</span> <span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span>            <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">.box4</span> <span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> goldenrod<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            box1            (display: none;)        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            box2            (visibility: hidden;)        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            box3            (opacity: 0;)        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            box4        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>效果:  <ul><li><img src="./medias/detail/load.gif" data-original="https://img-blog.csdnimg.cn/20210113223437891.png" alt="效果图"></li></ul></li></ul><h3 id="margin-对元素宽度的影响"><a href="#margin-对元素宽度的影响" class="headerlink" title="margin 对元素宽度的影响"></a>margin 对元素宽度的影响</h3><ul><li>如果块元素没有设置宽度,默认宽度就是父元素的宽度</li><li>在没有设置盒子宽度的情况下设置margin会影响盒子的宽度<ul><li>margin-left / margin-right 设置正值,盒子的宽度会减小</li><li>margin-left / margin-right 设置负值,盒子的宽度会增加</li></ul></li><li>如果盒子设置了宽度,设置margin,盒子的宽度不会改变,但盒子的位置会改变,默认情况下, margin-left 改变位置的优先级比 margin-right 改变位置的优先级高</li></ul><h2 id="背景和精灵图"><a href="#背景和精灵图" class="headerlink" title="背景和精灵图"></a>背景和精灵图</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul><li>background-color –&gt; 背景颜色<ul><li>背景色从border开始渲染</li></ul></li><li>background-image –&gt; 背景图片<ul><li>url(“”) –&gt; 图片地址(绝对路径,相对路径)</li><li>背景图从padding开始渲染,但是从border开始平铺渲染</li></ul></li><li>background-repeat –&gt; 设置背景平铺<ul><li>no-repeat –&gt; 不重复平铺</li><li>repeat –&gt; 重复平铺(default)</li><li>repeat-x –&gt; 沿水平方向平铺</li><li>repeat-y –&gt; 沿垂直方向平铺</li></ul></li><li>background-position –&gt; 背景定位<ul><li>数值<ul><li>x , y –&gt; 水平移动x个单位,垂直移动y个单位(左负右正, 上负下正)</li></ul></li><li>特殊变量<ul><li>left | right | center –&gt; 水平方向</li><li>top | bottom | center –&gt; 垂直方向</li></ul></li><li>单独设置<ul><li>百分比数值(盒子宽度|高度 + 盒子padding*2 - 背景图片的宽度|宽度)*百分比</li></ul></li></ul></li><li>background-attachment –&gt; 固定背景<ul><li>scroll –&gt; 滚动页面,位置不变,相对于窗口位置变化(default)</li><li>Fixed –&gt; 滚动页面,位置变化,相对于窗口位置不变</li></ul></li></ul><h3 id="精灵图"><a href="#精灵图" class="headerlink" title="精灵图"></a>精灵图</h3><ul><li>css sprits(精灵图技术) : 网页上有很多小的碎图片,不管图片的大小,一张图片就会发起一次HTTP请求.很多碎图片就会发起很多HTTP请求．降低网页的加载速度．我们将这些碎图片整合在一张图片上，就只会发起一次HTTP请求.</li><li>应用<ol><li>通过盒子宽度限制精灵图</li><li>通过background-position得到具体的精灵图小图片.</li></ol></li><li>精灵图的制作<ol><li>所有的碎图片格式必须相同</li><li>精灵图大小不要太大,能保证所有的小碎图可以装得下</li><li>小精灵图的摆放: 从上到下摆放</li></ol></li><li>分类<ul><li>水平精灵图 –&gt; 所有图片打包到一行</li><li>垂直精灵图 –&gt; 所有图片垂直一列</li><li>定点精灵图 –&gt; 随意放置图片,使用时找位置</li></ul></li></ul><h2 id="定位-position"><a href="#定位-position" class="headerlink" title="定位(position)"></a>定位(position)</h2><ul><li>确定元素是基于什么样的方式渲染的</li></ul><h3 id="static-–-gt-静态定位-default"><a href="#static-–-gt-静态定位-default" class="headerlink" title="static –> 静态定位(default)"></a>static –&gt; 静态定位(default)</h3><h3 id="relative-–-gt-相对定位"><a href="#relative-–-gt-相对定位" class="headerlink" title="relative –>　相对定位"></a>relative –&gt;　相对定位</h3><ul><li>相对于元素原来的位置</li><li>没有脱离文档流</li><li>不会影响后面的兄弟元素</li><li>定义位置的偏移量<ul><li>left</li><li>right</li><li>top</li><li>bottom</li><li>规则:<ul><li>正值: 向中心方向偏移</li><li>负值: 向边缘方向偏移</li><li>top优先级高于bottom, left优先级高于right</li></ul></li></ul></li></ul><h3 id="absolute-–-gt-绝对定位"><a href="#absolute-–-gt-绝对定位" class="headerlink" title="absolute –>　绝对定位"></a>absolute –&gt;　绝对定位</h3><ul><li>相对于 body 元素定位</li><li>脱离文档流</li><li>影响后面的兄弟元素</li><li>定义位置的偏移量:<ul><li>top –&gt; 相对于body的顶边定位</li><li>bottom –&gt; 相对于<strong>窗口的底边定位</strong></li><li>left | right –&gt; 相对于 body 的左右边定位的</li></ul></li><li>绝对定位影响元素宽高: 在未设置盒子的宽度和高度时,可以通过绝对定位的偏移量(top|bottom|left|right)来设置盒子的宽度,然而<strong>相对定位</strong>不可以</li><li>可以通过绝对定位来设置元素的居中(通过设置绝对定位元素的margin实现)</li></ul><h3 id="就进原则"><a href="#就进原则" class="headerlink" title="就进原则"></a>就进原则</h3><ul><li>嵌套的盒子设置了绝对定位,就会寻找离它最近的设置了定位(相对,绝对,固定)的祖先元素,以此来确定定位元素的偏移量,即此时不以body定位,而是想对设置了定位的祖先元素定位定位的顶点:绝对定位时相对于父元素的padding定位(包含padding点)进行定位,设置border会影响定位的结果</li><li>display: 不管是行内元素还是块元素,设置了绝对定位(absolute),display属性都会失效,即元素设置了绝对定位都可以直接设置宽高</li><li>压盖现象: 元素设置绝对定位(absolute)都会有压盖现象,即后面的元素会显示在前面的元素上</li></ul><h3 id="fixed-–-gt-固定定位"><a href="#fixed-–-gt-固定定位" class="headerlink" title="fixed –> 固定定位"></a>fixed –&gt; 固定定位</h3><ul><li>相对于浏览器窗口定位,所以与父元素的定位无关</li><li>不兼容IE6</li><li>脱离文档流,会影响兄弟元素(后面的兄弟元素会顶上来)</li><li>无论是块元素还是行内元素,一旦设置固定定位,可以直接设置宽高</li><li>display属性失效</li><li>可以通过盒子偏移量来设置盒子的宽高(没有设置height,width时)</li><li>优先级: top &gt; bottom , left &gt; right</li><li>如果偏移量设置负值,盒子将会被移出窗口</li></ul><h3 id="遮盖现象"><a href="#遮盖现象" class="headerlink" title="遮盖现象"></a>遮盖现象</h3><ul><li>一旦盒子设置了定位(绝对,相对,固定),就会产生遮盖现象,即盒子被另一个盒子盖住</li><li>特点<ol><li>设置了定位的盒子, 会遮住没有定位的盒子,包括浮动的盒子</li><li>盒子如果都设置了定位,后面的盒子会遮住前面的盒子</li><li>可以通过z-index属性来调节遮盖顺序</li></ol></li></ul><h3 id="z-index-–-gt-设置定位元素的遮盖顺序"><a href="#z-index-–-gt-设置定位元素的遮盖顺序" class="headerlink" title="z-index –> 设置定位元素的遮盖顺序"></a>z-index –&gt; 设置定位元素的遮盖顺序</h3><ul><li>只有设置了定位的元素才能激活z-index属性</li><li>属性值<ul><li>常数n</li><li>auto –&gt; 默认值,可以看做 0</li><li>n &lt; 0 –&gt; 渲染到盒子(包括未定位的盒子)的底部</li></ul></li></ul><h2 id="hack与其它"><a href="#hack与其它" class="headerlink" title="hack与其它"></a>hack与其它</h2><h3 id="hack"><a href="#hack" class="headerlink" title="hack"></a>hack</h3><ul><li><p>针对不同的浏览器去编写不同的html和css文件</p></li><li><p>html的hack</p><ul><li><p>针对不同的浏览器,在同一个html文件里,去写不同的html结构</p></li><li><p>IE接口代码</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--[if !IE]&gt;&lt;!--&gt;</span> 除IE外都可识别 <span class="token comment">&lt;!--&lt;![endif]--&gt;</span><span class="token comment">&lt;!--[if IE]&gt; 所有的IE可识别 &lt;![endif]--&gt;</span><span class="token comment">&lt;!--[if IE 5.0]&gt; 只有IE5.0可以识别 &lt;![endif]--&gt;</span><span class="token comment">&lt;!--[if IE 5]&gt; 仅IE5.0与IE5.5可以识别 &lt;![endif]--&gt;</span><span class="token comment">&lt;!--[if gt IE 5.0]&gt; IE5.0以上版本都可以识别 &lt;![endif]--&gt;</span><span class="token comment">&lt;!--[if lt IE 6]&gt; IE6以下版本可识别 &lt;![endif]--&gt;</span><span class="token comment">&lt;!--[if IE 6]&gt;this is ie6&lt;![endif]--&gt;</span><span class="token comment">&lt;!--[if gt IE 6]&gt; IE6以上版本可识别 &lt;![endif]--&gt;</span><span class="token comment">&lt;!--[if lt IE 7]&gt; IE7以下版本可识别 &lt;![endif]--&gt;</span><span class="token comment">&lt;!--[if IE 7]&gt;this is ie7&lt;![endif]--&gt;</span><span class="token comment">&lt;!--[if gt IE 7]&gt; IE7以上版本可识别 &lt;![endif]--&gt;</span><span class="token comment">&lt;!--[if lt IE 8]&gt; IE8以下版本可识别 &lt;![endif]--&gt;</span><span class="token comment">&lt;!--[if IE 8]&gt;this is ie8&lt;![endif]--&gt;</span><span class="token comment">&lt;!--[if gt IE 8]&gt; IE8以上版本可识别 &lt;![endif]--&gt;</span><span class="token comment">&lt;!--[if lt IE 9]&gt; IE9以下版本可识别 &lt;![endif]--&gt;</span><span class="token comment">&lt;!--[if IE 9]&gt;this is ie9&lt;![endif]--&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>css的hack</p><ul><li>属性值hack</li><li>选择器hack</li></ul></li></ul><h3 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h3><ul><li>% –&gt; 百分比单位,相当于父元素(宽,高)的百分比</li><li>px –&gt; 像素单位</li><li>in –&gt;　英寸单位(1英寸包含96个像素点)</li><li>cm–&gt; 厘米单位(1in = 2.54cm)</li><li>mm –&gt; 毫米单位</li><li>pt –&gt; 磅单位</li><li>pc –&gt; 包含12点活字</li><li>em –&gt;　相对字体大小</li><li>rem –&gt; 相对于<strong>根元素</strong>字体的大小</li><li>deg –&gt; 度</li></ul><h3 id="FC-formatting-Contexts-–-gt-行内格式化上下文"><a href="#FC-formatting-Contexts-–-gt-行内格式化上下文" class="headerlink" title="FC(formatting Contexts) –> 行内格式化上下文"></a>FC(formatting Contexts) –&gt; 行内格式化上下文</h3><ul><li>FC是页面中的一块渲染区域, 并且有一套渲染规则, 它决定了其子元素将如何定位, 以及和其他元素的关系和相互作用</li><li>常见的FC<ul><li>BFC(Block formatting Contexts) –&gt; 块级格式化上下文<ul><li>布局规则<ol><li>内部的盒子会在垂直方向,一个个地放置</li><li>盒子垂直方向的距离由margin决定,属于同一BFC的两个相邻Box的上下边距会合并</li><li>每个元素的左边,与包含的盒子的左边重合,浮动也是一样</li><li>BFC区域不会与Float重叠(遮盖)</li><li>BFC就是页面上的一个隔离的独立容器,容器里面的子元素不会影响外面的元素,反之也是如此</li><li>计算BFC的高度时,浮动元素也参与计算</li></ol></li><li>会产生BFC的情况:<ol><li>根元素</li><li>float != none</li><li>position = absolute | fixed</li><li>display = inline-block | table-cell | table-caption | flex</li><li>over-flow != visible  </li></ol></li></ul></li><li>IFC(Inline formatting Contexts) –&gt; 内联格式化上下文<ul><li>IFC的line Box(线框)高度由其包含行内元素中最高实际高度计算而来的,不受垂直方向的padding/margin影响</li><li>IFC中的line Box一般左右都贴紧整个IFC,但是顺序会因为Float元素而被打乱</li><li>一旦在IFC区域中插入块元素时(如p标签中插入一个div)会产生两个匿名块与div隔开,即产生两个IFC,每个IFC对外表现为块元素,与div垂直排列</li><li>水平居中: text-align</li><li>垂直居中: vertical-align</li></ul></li><li>GFC(GridLayout formatting Contexts) –&gt; 网格布局格式化上下文</li><li>FFC(Flex formatting Contexts) –&gt; <strong>自适应格式化上下文</strong></li></ul></li></ul><h3 id="基线-行高"><a href="#基线-行高" class="headerlink" title="基线, 行高"></a>基线, 行高</h3><ul><li>基线, 底线, 顶线, 中线<br><img src="./medias/detail/load.gif" data-original="https://img-blog.csdn.net/20170125141742563" alt="基线.jpg"></li><li>内容区 : 底线和顶线包裹的区域</li><li>行高 : 包括内容区与以内容区为基础对称拓展的空白区域</li><li>行距：指相邻文本间上一个文本行基线和下一个文本行顶线之间的距离<br><img src="./medias/detail/load.gif" data-original="https://img-blog.csdn.net/20170125142618943" alt="行高和行距"></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java多线程编程</title>
      <link href="/langblogs/posts/9.html"/>
      <url>/langblogs/posts/9.html</url>
      
        <content type="html"><![CDATA[<h2 id="多线程简介"><a href="#多线程简介" class="headerlink" title="多线程简介"></a>多线程简介</h2><h3 id="对多线程的理解"><a href="#对多线程的理解" class="headerlink" title="对多线程的理解"></a>对多线程的理解</h3><h4 id="1-多任务与多线程"><a href="#1-多任务与多线程" class="headerlink" title="1. 多任务与多线程"></a>1. 多任务与多线程</h4><p>&nbsp;　　多线程是多任务的一种特别的形式，但多线程使用了更小的资源开销。</p><h4 id="2-多线程例子-生活，游戏，编程"><a href="#2-多线程例子-生活，游戏，编程" class="headerlink" title="2. 多线程例子(生活，游戏，编程)"></a>2. 多线程例子(生活，游戏，编程)</h4><ol><li><p>边吃饭边玩手机，边听歌边写作业</p></li><li><p>开黑打游戏</p></li><li><p>等等</p></li></ol><h4 id="3-进程，程序，线程的理解"><a href="#3-进程，程序，线程的理解" class="headerlink" title="3. 进程，程序，线程的理解"></a>3. 进程，程序，线程的理解</h4><ul><li><p>进程: 是程序的一次执行，是动态的，一个进程至少包含一个线程，一个线程不能独立存在,它必须是进程的一部分；一个进程一直运行，直到所有非守护线程都结束运行后才能结束。</p></li><li><p>程序是代码段，是静态的。</p></li><li><p>一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。线程是一个动态执行的过程，它也有一个从产生到死亡的过程。</p></li></ul><h4 id="3-核心概念"><a href="#3-核心概念" class="headerlink" title="3. 核心概念"></a>3. 核心概念</h4><ul><li><p>线程是独立的执行路径；</p></li><li><p>在程序运行时，即使没有自己的创建的线程，后台也会有多个线程，如主线程，gc线程；</p></li><li><p>main()为主线程，是程序的入口，用于执行整个程序；</p></li><li><p>在一个进程中，如果开辟了多个线程，线程的运行由调度器安排调度，调度器由操作系统的调度算法决定,人为不可干涉；</p></li><li><p>对同一份资源操作时，会存在资源抢夺的问题，需要加入并发控制；</p></li><li><p>线程会带来额外的开销，如CPU调度的时间，并发控制的开销；</p></li><li><p>每个线程在自己的工作内存交互，内存控制不当会造成数据不一致；</p></li></ul><h2 id="线程实现"><a href="#线程实现" class="headerlink" title="线程实现"></a>线程实现</h2><h3 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h3><p>&nbsp;　　每一个 Java 线程都有一个优先级，这样有助于操作系统确定线程的调度顺序。</p><h3 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h3><ol><li>通过继承Thread类线程创建线程</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyThread is running!!! "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MyThread</span> myThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Main Thread is running "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>通过实现Runnable接口创建线程</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RunnableDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MyRunnable</span> R1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token string">"Thread-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        R1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MyRunnable</span> R2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token string">"Thread-2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        R2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是主线程main"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Thread</span> t<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> threadName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        threadName <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Creating: "</span> <span class="token operator">+</span> threadName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Running: "</span> <span class="token operator">+</span> threadName <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread: "</span> <span class="token operator">+</span> threadName <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread: "</span> <span class="token operator">+</span> threadName <span class="token operator">+</span> <span class="token string">"interrupted."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread "</span> <span class="token operator">+</span> threadName <span class="token operator">+</span> <span class="token string">" exiting."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Starting "</span> <span class="token operator">+</span> threadName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> threadName<span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>通过Callable接口创建线程</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><ul><li>真实对象和代理对象都要实现同一个接口</li><li>代理对象要代理真实对象</li><li>优点:<ul><li>代理对象可以做很多真实对象做不了的事情</li><li>真实对象专注于自己的事情</li></ul></li></ul><h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><ul><li>线程的生命周期</li></ul><h3 id="1-新建状态"><a href="#1-新建状态" class="headerlink" title="1. 新建状态"></a>1. 新建状态</h3><p>&nbsp;　　使用new关键字和Thread类或其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序star()这个线程。</p><h3 id="2-就绪状态"><a href="#2-就绪状态" class="headerlink" title="2. 就绪状态"></a>2. 就绪状态</h3><p>&nbsp;　　当线程对象调用start()方法后，该线程就进入就绪状态。就绪状态的线程处于就绪队列中，要等待JVM里的线程调度器的调度。</p><h3 id="3-执行状态"><a href="#3-执行状态" class="headerlink" title="3. 执行状态"></a>3. 执行状态</h3><p>&nbsp;　　如果就绪队列中的线程获得了处理机，就可以执行run()方法此时线程便处于运行状态。</p><h3 id="4-阻塞状态"><a href="#4-阻塞状态" class="headerlink" title="4. 阻塞状态"></a>4. 阻塞状态</h3><p>&nbsp;　　当一个线程执行了sleep()，suspend()等方法后，失去所占用资源之后，该线程就从运行态转化为阻塞态。在睡眠时间已到或获得设备资源后就可以重新进入就绪态。<br>阻塞态可以分为三种：</p><ul><li><p>等待阻塞：运行态中的线程执行了wait()方法，使线程进入等待阻塞态</p></li><li><p>同步阻塞：线程在获取synchronized（同步）同步锁失败（因为同步锁被其他线程占用）。</p></li><li><p>其他阻塞：在调用线程的sleep()或join()发出的I/O请求时，线程会进入到阻塞态，当sleep()态超时，join()等待线程终止或超时时，或者I/O处理完毕，线程重新转入就绪态。</p></li></ul><h3 id="5-终止状态"><a href="#5-终止状态" class="headerlink" title="5. 终止状态"></a>5. 终止状态</h3><p>一个运行态的线程完成任务或其他终止条件发生时，该线程就切换到终止态；</p><h3 id="线程控制常用方法"><a href="#线程控制常用方法" class="headerlink" title="线程控制常用方法"></a>线程控制常用方法</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>setPriority(int newPriority)</td><td>更改线程的优先级</td></tr><tr><td>static void sleep(long millisecond)</td><td>在指定毫秒数内让当前正在执行的线程休眠</td></tr><tr><td>void join()</td><td>等待该线程终止</td></tr><tr><td>static void yield</td><td>暂停正在执行的线程对象,并执行其他线程</td></tr><tr><td>void interrupt()</td><td>中段线程</td></tr><tr><td>boolean isAlive()</td><td>检测线程是否处于活动状态</td></tr></tbody></table><h3 id="线程的生命周期图示"><a href="#线程的生命周期图示" class="headerlink" title="线程的生命周期图示"></a><strong>线程的生命周期图示</strong></h3><p><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2020/11/16/R2PTzGVN5OAKUx8.png" alt="线程状态的转化.png"></p><h3 id="线程控制"><a href="#线程控制" class="headerlink" title="线程控制"></a>线程控制</h3><h4 id="停止线程"><a href="#停止线程" class="headerlink" title="停止线程"></a>停止线程</h4><p>代码演示:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 1.建议线程正常停止 --&gt; 利用次数, 不建议使用死循环</span><span class="token comment">// 2.建议使用标准位来控制线程,让其自己停下来</span><span class="token comment">// 3.不建议使用stop()和destroy()</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stop</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token comment">// 1.设置一个标志位</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread Running "</span> <span class="token operator">+</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 2.设置一个公开的方法停止线程, 转换标志位</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Stop</span> stop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>stop<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MainThread is running "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">666</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 调用stop()方法切换标志位,让线程停止</span>                stop<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"StopThread Stop, i = "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h4><p>代码演示:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token comment">// sleep(millisecond)指定当前线程阻塞的毫秒数</span><span class="token comment">// sleep存在异常(interruptException)</span><span class="token comment">// sleep完成后线程进入就绪状态</span><span class="token comment">// sleep可以模拟网络延迟,倒计时等</span><span class="token comment">// 每一个对象都有一个锁,sleep不会释放锁</span><span class="token comment">// 利用线程控制来实现定时器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Timer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Date</span> starTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>starTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                starTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h4><p>代码演示:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestYield</span> <span class="token punctuation">{</span>    <span class="token comment">// 礼让线程,让当前正在执行的线程暂停,但不阻塞</span>    <span class="token comment">// 将线程从运行状态转为就绪状态</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MyYield</span> myYield <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyYield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myYield<span class="token punctuation">,</span> <span class="token string">"Thread-A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myYield<span class="token punctuation">,</span> <span class="token string">"Thread-B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyYield</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 线程礼让</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" be stopped"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*运行结果;        Thread-A running        Thread-A be stopped        Thread-B running        Thread-B be stopped */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="线程抢占"><a href="#线程抢占" class="headerlink" title="线程抢占"></a>线程抢占</h4><p>代码演示:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestJoin</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" Running "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">TestJoin</span> testJoin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestJoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>testJoin<span class="token punctuation">,</span> <span class="token string">"testJoin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MainThread Running "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="观测线程的状态"><a href="#观测线程的状态" class="headerlink" title="观测线程的状态"></a>观测线程的状态</h3><p>代码演示:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 监视线程的状态</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadMonitor</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread is running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 监视</span>        <span class="token class-name">Thread<span class="token punctuation">.</span>State</span> state <span class="token operator">=</span> thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        state <span class="token operator">=</span> thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>state <span class="token operator">!=</span> <span class="token class-name">Thread<span class="token punctuation">.</span>State</span><span class="token punctuation">.</span>TERMINATED<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            state <span class="token operator">=</span> thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><p>代码演示:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 测试线程的优先级</span><span class="token comment">// 范围: 1 - 10</span><span class="token comment">// 默认为 5</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPriority</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MyPriority</span> myPriority <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 的优先级为 "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread_A <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myPriority<span class="token punctuation">,</span> <span class="token string">"thread_A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread_B <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myPriority<span class="token punctuation">,</span> <span class="token string">"thread_B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread_B<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread_C <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myPriority<span class="token punctuation">,</span> <span class="token string">"thread_C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread_C<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread_D <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myPriority<span class="token punctuation">,</span> <span class="token string">"thread_D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread_D<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread_E <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myPriority<span class="token punctuation">,</span> <span class="token string">"thread_E"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread_E<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread_A<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread_B<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread_C<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread_D<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread_E<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyPriority</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 的优先级为 "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><p>代码演示:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 线程分为用户线程和守护线程</span><span class="token comment">// 虚拟机必须确保用户线程执行完毕</span><span class="token comment">// 虚拟机不必等待守护线程(内存监控, 垃圾回收, 操作日志记录等等)完毕</span><span class="token comment">// 测试守护线程</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDaemon</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">God</span> god_ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">God</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">People</span> people_ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> god <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>god_<span class="token punctuation">,</span> <span class="token string">"God"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 把God设置为守护线程</span>        god<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> people <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>people_<span class="token punctuation">,</span> <span class="token string">"people"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        god<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        people<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 活着 "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 死亡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">God</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 守护"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><ul><li>多个线程操作临界资源</li></ul><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><ul><li>理解并发</li></ul><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p>使用Lock,演示代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">ReentrantLock</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnsafeThread01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Sale</span> sale <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> threadA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>sale<span class="token punctuation">,</span> <span class="token string">"APP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> threadB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>sale<span class="token punctuation">,</span> <span class="token string">"官网"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> threadC <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>sale<span class="token punctuation">,</span> <span class="token string">"票贩子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadB<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadC<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Sale</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token comment">// 票数</span>    <span class="token keyword">int</span> ticketNums <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 售票</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ticketNums <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 卖出了第 "</span> <span class="token operator">+</span> ticketNums<span class="token operator">--</span> <span class="token operator">+</span> <span class="token string">" 张票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Lock是显示锁(手动开启和关闭锁,别忘记关闭锁),synchronized是隐式锁,出了作用域自动释放</li><li>Lock只有代码块锁,synchronized有代码块锁和方法锁</li><li>使用Lock锁,JVM将花费较少的时间来调整线程,性能更好.并且具有更好的扩展性(能提供更多的子类)</li><li>使用顺序<ul><li>Lock &gt; 同步代码块 &gt; 同步方法</li></ul></li></ul><h2 id="线程通信问题"><a href="#线程通信问题" class="headerlink" title="线程通信问题"></a>线程通信问题</h2><h3 id="生产者消费者模型"><a href="#生产者消费者模型" class="headerlink" title="生产者消费者模型"></a>生产者消费者模型</h3><p>管程法:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">zl<span class="token punctuation">.</span></span><span class="token class-name">Winter<span class="token punctuation">.</span>Demo16_thread</span><span class="token punctuation">;</span><span class="token comment">// 测试生产者消费者模型</span><span class="token comment">// 管程法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPC</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SynContainer</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Producer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Costumer</span> costumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Costumer</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread_A <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>producer<span class="token punctuation">,</span><span class="token string">"生产者"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread_B <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>costumer<span class="token punctuation">,</span><span class="token string">"消费者"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread_A<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread_B<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 生产者</span><span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token class-name">SynContainer</span> container<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span><span class="token class-name">SynContainer</span> container<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>container <span class="token operator">=</span> container<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 生产</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            container<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Chicken</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生产者生产了第"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"只鸡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 消费者</span><span class="token keyword">class</span> <span class="token class-name">Costumer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token class-name">SynContainer</span> container<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Costumer</span><span class="token punctuation">(</span><span class="token class-name">SynContainer</span> container<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>container <span class="token operator">=</span> container<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 消费</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者消费了--&gt;&gt;第"</span> <span class="token operator">+</span> container<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token string">"只鸡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 产品</span><span class="token keyword">class</span> <span class="token class-name">Chicken</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Chicken</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 缓冲区</span><span class="token keyword">class</span> <span class="token class-name">SynContainer</span> <span class="token punctuation">{</span>    <span class="token comment">// 容器</span>    <span class="token class-name">Chicken</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chickens <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chicken</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 容器计数器</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 生产者放入产品</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Chicken</span> chicken<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 容器满, 等待消费者消费</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> chickens<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 通知消费者消费, 生产者等待</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// 容器没满, 放入产品</span>        chickens<span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> chicken<span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">// 通知消费者消费</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 消费者消费</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">Chicken</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 判断是否能消费</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 等待生产者生产, 消费者等待</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// 可以消费,生产者消费</span>        count<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token class-name">Chicken</span> chicken <span class="token operator">=</span> chickens<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 消费完毕, 通知生产者生产</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> chicken<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>信号灯法:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 测试生产者消费者模型</span><span class="token comment">// 信号灯法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPC2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Cinema</span> cinema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cinema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span>cinema<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Audience</span><span class="token punctuation">(</span>cinema<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 生产者 --&gt; 演员</span><span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token class-name">Cinema</span> cinema<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token class-name">Cinema</span> cinema1<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cinema <span class="token operator">=</span> cinema1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>cinema<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;大话西游&gt;&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>cinema<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token string">"广告: 你的益达"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 消费者 --&gt; 观众</span><span class="token keyword">class</span> <span class="token class-name">Audience</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token class-name">Cinema</span> cinema<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Audience</span><span class="token punctuation">(</span><span class="token class-name">Cinema</span> cinema1<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cinema <span class="token operator">=</span> cinema1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>cinema<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 产品 --&gt; 节目</span><span class="token keyword">class</span> <span class="token class-name">Cinema</span><span class="token punctuation">{</span>    <span class="token comment">// 节目</span>    <span class="token class-name">String</span> program<span class="token punctuation">;</span>    <span class="token comment">// 演员是否在表演</span>    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">// 演员表演. 观众等待</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token class-name">String</span> program<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"表演了"</span> <span class="token operator">+</span>  program<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 通知观众观看</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>program <span class="token operator">=</span> program<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>flag<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 观众观看, 演员等待</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"观众观看了"</span> <span class="token operator">+</span> program<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 通知演员表演</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>flag<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><h2 id="高级主题"><a href="#高级主题" class="headerlink" title="高级主题"></a>高级主题</h2>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>知识点</title>
      <link href="/langblogs/posts/5.html"/>
      <url>/langblogs/posts/5.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTML查缺补漏"><a href="#HTML查缺补漏" class="headerlink" title="HTML查缺补漏"></a>HTML查缺补漏</h1><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><ol><li>标签名必须使用小写字母</li><li>属性名必须使用小写字母,属性值必须用双引号包裹</li><li>使用4个空格作为一个缩进层级</li><li>class属性值 –&gt; 单纯全小写,单词之间以”-“分割</li><li>id属性值使用小驼峰式命名法</li></ol><h2 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h2><h3 id="元素-标签-属性"><a href="#元素-标签-属性" class="headerlink" title="元素 , 标签 , 属性"></a>元素 , 标签 , 属性</h3><p>元素是实体,标签是名称(标记)</p><h4 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h4><p>构成HTML文件的基本对象</p><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><p>用于标记HTML元素</p><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul><li>为HTML元素提供各种附加信息</li><li>使用 <code>lang='en'</code></li><li>分类:<ul><li>必须属性(img的src)</li><li>可选属性(img的width,height等)</li><li>全局属性(id, class, style, lang)</li><li>事件属性(onclike, onmouseover, onmouseout)</li></ul></li></ul><hr><h3 id="lt-head-gt"><a href="#lt-head-gt" class="headerlink" title="<head>"></a><code>&lt;head&gt;</code></h3><ul><li><code>&lt;base&gt;</code> –&gt; 为页面上的所有链接规定了默认地址或默认目标.<ul><li>herf属性: 规定URL</li><li>target属性: 规定在哪打开链接</li></ul></li><li><code>&lt;link&gt;</code> –&gt; 引入外部资源<ul><li>常用于: 引入外部样式</li></ul></li><li><code>&lt;style&gt;</code> –&gt; 定义内联样式</li><li><code>&lt;meta&gt;</code> –&gt; 提供页面相关的元信息<ul><li>content属性: 定义与http-equiv或name属性相关的的元信息</li><li>http-equiv: 把content属性关联到HTTP头部(定义一些请求信息)</li><li>name: 把content属性关联到一个名称(author, description, keywords(SEO优化)等)  </li></ul></li><li>字符集<ul><li>utf-8 : 国际标准字库(一个汉字3个字节)</li><li>GBK/gb2312: 中国字库(一个汉字2个字节)</li></ul></li></ul><hr><h3 id="lt-body-gt-–-gt-定义文档的主体"><a href="#lt-body-gt-–-gt-定义文档的主体" class="headerlink" title="<body> –>定义文档的主体"></a><code>&lt;body&gt;</code> –&gt;定义文档的主体</h3><ul><li>容器级标签:</li><li>文本级标签:</li></ul><hr><h3 id="lt-img-gt"><a href="#lt-img-gt" class="headerlink" title="<img>"></a><code>&lt;img&gt;</code></h3><ul><li>属性<ul><li>src –&gt; 资源文件的路径 (注意绝对路径和相对路径)<ul><li>相对路径<ul><li>/ –&gt; 根目录</li><li>./ –&gt; 当前目录</li><li>../ –&gt; 退出当前目录</li></ul></li></ul></li><li>alt –&gt; 图片加载失败后显示的文本提示</li><li>title –&gt; 文本提示信息(鼠标悬停显示)</li></ul></li></ul><h3 id="lt-a-gt"><a href="#lt-a-gt" class="headerlink" title="<a>"></a><code>&lt;a&gt;</code></h3><ul><li>属性:<ul><li>herf –&gt; 设置超链接的地址/‘#’代表链接到当前页面或页面的某个位置</li><li>title –&gt; 文本提示信息</li><li>rel –&gt; 规定当前文档和链接文档之间的关系</li><li>download –&gt; 规定被下载的超链接目标</li><li>media –&gt; 规定被链接文档是为哪种媒介/设备优化的</li><li>type –&gt; 规定被链接文档的MIME类型</li><li>target –&gt; 页面打开方式<ul><li>_self 在当前页面中打开(覆盖当前页面)</li><li>_blank  新的页面中打开</li><li>_parent 页面的父窗口或父框架中打开</li><li>_top 将页面在整个浏览器窗口打开</li><li>framename 在指定的框架中打开页面</li></ul></li></ul></li><li>锚点<ul><li>设置: 给标签设置name或id</li><li>点击 <code>#id</code> 到达 <code>id</code></li></ul></li></ul><h3 id="lt-div-gt"><a href="#lt-div-gt" class="headerlink" title="<div>"></a><code>&lt;div&gt;</code></h3><ul><li>div 作为容器.如果没有内容撑起或者不设置高度,是没有默认效果的</li><li>盒子模型:<ul><li><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2020/12/29/OGfkTgFQ85ARNuV.png" alt="标准盒子模型.png"></li><li><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2020/12/29/IQGPska2BzApNv5.png" alt="IE盒子模型.png"></li></ul></li></ul><h3 id="lt-ul-gt-lt-li-gt"><a href="#lt-ul-gt-lt-li-gt" class="headerlink" title="<ul> <li>"></a><code>&lt;ul&gt; &lt;li&gt;</code></h3><ul><li>无序列表(unordered list)</li><li>列表项(list item)</li><li>属性:<ul><li>type<ul><li>disc 实心圆</li><li>circle 空心圆</li><li>square 实现方块  </li></ul></li></ul></li></ul><h3 id="lt-ol-gt-lt-li-gt"><a href="#lt-ol-gt-lt-li-gt" class="headerlink" title="<ol> <li>"></a><code>&lt;ol&gt; &lt;li&gt;</code></h3><ul><li>有序列表(ordered list)</li><li>属性:<ul><li>type<ul><li>A –&gt; 大写英文字母</li><li>a –&gt; 小写英文字母</li><li>1 –&gt; 阿拉伯数字</li><li>I –&gt; 大写罗马数字</li><li>i –&gt; 小写罗马数字</li></ul></li><li>start (从几开始,只能是阿拉伯数字)</li><li>reversed (html5新增 –&gt; 倒序)</li></ul></li></ul><h3 id="lt-dl-gt"><a href="#lt-dl-gt" class="headerlink" title="<dl>"></a><code>&lt;dl&gt;</code></h3><ul><li>定义列表(definition list) –&gt; dl</li><li>定义标题(definition title) –&gt; dt</li><li>定义描述(definition description) –&gt; dd(对dt的描述)</li><li>dl里面嵌套dt和dl</li></ul><h3 id="lt-table-gt"><a href="#lt-table-gt" class="headerlink" title="<table>"></a><code>&lt;table&gt;</code></h3><ul><li><p>表格容器</p></li><li><p><code>&lt;tr&gt;</code> –&gt; 一行</p></li><li><p><code>&lt;th&gt;</code> –&gt; 表头</p></li><li><p><code>&lt;td&gt;</code> –&gt; 单元格 (table dock)</p></li><li><p><code>&lt;thead&gt;</code> –&gt; 定义表格页眉/表头</p></li><li><p><code>&lt;tbody&gt;</code> –&gt; 定义表格主体</p></li><li><p><code>&lt;tfoot&gt;</code> –&gt; 定义表格页脚</p></li><li><p>thead, tbody, 和 tfoot 元素默认不会影响表格的布局,主要用于通过CSS来设计表格样式</p></li><li><p><code>&lt;caption&gt;</code> –&gt; 定义table title</p></li><li><p>属性:</p><ul><li>colspan 列合并</li><li>rowspan 行合并</li><li>border –&gt; 边框</li><li>align –&gt; 内容对齐方式(left right center)</li><li>cellspacing –&gt; 单元格间距(边框与边框之间的距离)</li><li>cellpadding –&gt; 单元格边距(内容与边框之间的距离)</li><li>background</li><li>bgcolor</li><li>summary –&gt; table隐藏信息,用来提升SEO</li></ul></li></ul><h3 id="lt-form-gt"><a href="#lt-form-gt" class="headerlink" title="<form>"></a><code>&lt;form&gt;</code></h3><ul><li>用于收集不同类型的用户输入</li><li>属性:<ul><li>name –&gt; 名称</li><li>value –&gt; 提交给服务器的选项值</li><li>action –&gt; 数据提交地址</li><li>method –&gt; 数据提交的方式(GET提交 / POST提交)</li><li>target –&gt;</li></ul></li><li>控件通用属性<ul><li>name</li><li>value</li><li>autofocus –&gt; 规定在页面加载后文本区域自动获得焦点(HTML5新增)</li><li>form –&gt; 规定文本区域所属的一个或多个表单(HTML5新增)</li><li>placeholder –&gt; 规定文本区域预期值的间断提升(HTML5新增)</li><li>disabled –&gt; 规定是否能使用</li><li>readonly –&gt; 规定文本区只能读</li><li>maxlength –&gt; 规定文本区域的最大字符数(textarea和input标签)</li><li>minlength –&gt; 最小字符数</li><li>required –&gt; 规定文本区域为必填(textarea和input标签, HTML5新增)</li><li>hidden –&gt; 规定对元素进行隐藏</li></ul></li><li>控件:<ul><li><code>&lt;textarea&gt;</code> –&gt; 多行文本域<ul><li>rows –&gt; 行高(数字值 –&gt; 字节数)</li><li>col –&gt; 列宽(数字值 –&gt; 字节数)</li></ul></li><li><code>&lt;lable&gt;</code> –&gt; 为表单控件定义标注<ul><li>for –&gt; 规定lable绑定到那个表单控件(id),点击label使控件获得焦点</li><li>或者直接将控件写在<code>&lt;label&gt;</code> 内</li></ul></li><li><code>&lt;select&gt;</code> –&gt; 下拉列表<ul><li>multiple –&gt; 多选</li><li>size –&gt; 显示在页面上列表的项数</li><li><code>&lt;optgroup&gt;</code> –&gt; 定义分组<ul><li>label –&gt; 分组的描述</li></ul></li><li><code>&lt;option&gt;</code> –&gt; 定义列表项<ul><li>selected –&gt; 默认选中</li></ul></li></ul></li><li><code>&lt;button&gt;</code> –&gt; 按钮</li><li><code>&lt;input&gt;</code> –&gt; 输入框<ul><li>type:<ul><li>text –&gt; 单行文本框<ul><li>pattern –&gt; 规定输入字段的值的模式或格式(校验正则表达式)</li></ul></li><li>password –&gt; 密码框</li><li>radio –&gt; 单选框<ul><li>name设置单选框统一的名称,value设置单选框不同的值</li></ul></li><li>checkbox –&gt; 复选框<ul><li>name设置统一的标识,value设置不同的值</li><li>checked –&gt; 设置默认选中</li></ul></li><li>image –&gt; 图像域</li><li>file –&gt; 文本域 (选择文件上传)</li><li>hidden –&gt; 隐藏文本</li><li>button –&gt; 普通按钮</li><li>submit –&gt; 提交</li><li>reset –&gt; 重置</li></ul></li></ul></li></ul></li></ul><h3 id="lt-button-gt"><a href="#lt-button-gt" class="headerlink" title="<button>"></a><code>&lt;button&gt;</code></h3><ul><li>写在表单内,其type属性默认为submit</li><li>属性:<ul><li>type:<ul><li>button(default)</li><li>reset</li><li>submit</li></ul></li></ul></li></ul><h3 id="lt-section-gt"><a href="#lt-section-gt" class="headerlink" title="<section>"></a><code>&lt;section&gt;</code></h3><ul><li>定义了文档的某个区域。比如章节、头部、底部或者文档的其他区域</li><li>HTML5新增</li><li>兼容性:<ul><li>IE 9+、Firefox、Opera、Chrome 和 Safari<code>&lt;section&gt;</code>标签。</li><li>IE 8 或更早版本的 IE 浏览器不支持<code>&lt;section&gt;</code>标签</li></ul></li></ul><h3 id="其他标签"><a href="#其他标签" class="headerlink" title="其他标签"></a>其他标签</h3><ul><li><code>&lt;pre&gt;</code> –&gt; 预格式化原样输出</li><li><code>&lt;code&gt;</code> –&gt; 单行代码</li><li><code>&lt;strong&gt;</code> –&gt; 加粗效果</li><li><code>&lt;em&gt;</code> –&gt; 斜体效果</li><li><code>&lt;ins&gt;</code> –&gt; 下划线</li><li><code>&lt;del&gt;</code> –&gt; 删除线</li><li><code>&lt;abbr&gt;</code> –&gt; 定义缩写</li><li><code>&lt;address&gt;</code> –&gt; 定义地址</li><li><code>&lt;iframe&gt;</code> –&gt; 内联框架(用于引入其他页面)</li></ul><h3 id="实体字符"><a href="#实体字符" class="headerlink" title="实体字符"></a>实体字符</h3><ul><li><code>&amp;nbsp;</code> –&gt; 空格</li><li><code>&amp;emsp;</code> –&gt; 全角空格</li><li><code>&amp;copy;</code> –&gt; 版权符号 ©</li><li><code>&amp;yen;</code>  –&gt; 人民币符号 ¥</li><li><code>&amp;gt;</code> –&gt; 大于号 &gt;</li><li><code>&amp;lt;</code> –&gt; 小于号 &lt;</li></ul><h2 id="HTML5-新标签"><a href="#HTML5-新标签" class="headerlink" title="HTML5 新标签"></a>HTML5 新标签</h2><ul><li>骨架: 第一步:<code>&lt;!DOCTYPE html&gt;</code></li><li>浏览器对于不认识的标签或属性,不会报错,会按照默认方式处理</li><li>新的语法<ol><li>单标签(自封闭标签)可以不写关闭符号/</li><li>标签的type属性可以不书写</li><li>标签的属性值可以不用写双引号(不建议使用)</li><li>标签可以使用大写字母(不建议使用)</li></ol></li></ul><h3 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h3><ul><li><code>&lt;div&gt;</code> 被拆分为 <code>&lt;section&gt;</code>, <code>&lt;article&gt;</code>, <code>&lt;nav&gt;</code>, <code>&lt;header&gt;</code>, <code>&lt;footer&gt;</code>, <code>&lt;aside&gt;</code></li><li>文档中插入图片 –&gt; <code>&lt;figure&gt;</code> |　<code>&lt;figcaption&gt;</code></li><li>时间语义化标签 –&gt; <code>&lt;time&gt;</code> (行内元素)</li><li>强调语义 –&gt; <code>&lt;mark&gt;</code></li><li>总结语义 –&gt; <code>&lt;details&gt;</code> | <code>&lt;summary&gt;</code></li></ul><h3 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a>表单元素</h3><ul><li>form可以不包裹表单元素, 需要通过id定义名称, 表单控件使用form属性产生绑定</li><li>label 标签不适用for参数绑定, 直接包裹绑定的单选框或者复选框</li><li>placeholder: 输入框提示的文案</li><li>autofocus: 自动获得焦点</li><li>required: 表单必填项</li><li>智能感应: 使用datalist标签和要产生感应的表单元素参数绑定</li><li>html5表单不但是语义变化,在提交时会进行正则验证</li></ul><h3 id="多媒体"><a href="#多媒体" class="headerlink" title="多媒体"></a>多媒体</h3><h4 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h4><ul><li>html4 得向将视频传到视频网站,再利用Flash插件,来播放视频</li><li>html5插入视频: 将视频上传到服务器,播放视频不需要借助Flash插件,使用<code>&lt;video&gt;</code>标签直接引入视频,格式为mp4<ul><li>src : 路径</li><li>controls : 控制条</li><li>autoplay : 自动播放</li><li>loop : 循环播放</li><li><code>&lt;source&gt;</code> : 引入多个文件</li></ul></li><li>IE不支持<code>&lt;video&gt;</code></li></ul><h4 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h4><ul><li>html4中通过Flash插件来插入音频</li><li>html5中通过<code>&lt;audio&gt;</code>来直接引入音频(mp3, ogg格式)<ul><li>src</li><li>controls</li><li>autoplay</li><li>loop</li></ul></li><li>IE不支持<code>&lt;audio&gt;</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部分前端知识</title>
      <link href="/langblogs/posts/2.html"/>
      <url>/langblogs/posts/2.html</url>
      
        <content type="html"><![CDATA[<h1 id="前端查缺补漏"><a href="#前端查缺补漏" class="headerlink" title="前端查缺补漏"></a>前端查缺补漏</h1><h2 id="FE-前端工程师-RD-后端工程师"><a href="#FE-前端工程师-RD-后端工程师" class="headerlink" title="FE(前端工程师) RD(后端工程师)"></a>FE(前端工程师) RD(后端工程师)</h2><h3 id="招聘要求"><a href="#招聘要求" class="headerlink" title="招聘要求"></a>招聘要求</h3><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="三种语言-结构HTML-表现CSS-行为JavaScript"><a href="#三种语言-结构HTML-表现CSS-行为JavaScript" class="headerlink" title="三种语言:结构HTML 表现CSS 行为JavaScript"></a>三种语言:结构HTML 表现CSS 行为JavaScript</h3><ol><li>HTML:</li><li>互联网原理:互联网是由许多个计算机组成,并通过网络实现计算机之间数据的传输  </li><li>浏览器/服务器模型(B/S):用户通过在浏览器上输入一个网址,通过HTTP协议向服务器发送请求,服务器做出响应,将相关网页文档数据传输到本地计算机,在浏览器上渲染出来  </li><li>数据:文字,图片,视频,音频….</li></ol><h3 id="互联网原理"><a href="#互联网原理" class="headerlink" title="互联网原理"></a>互联网原理</h3><h4 id="服务器-server"><a href="#服务器-server" class="headerlink" title="服务器(server)"></a>服务器(server)</h4><ul><li>作用:存放数据  </li><li>必须24小时在线,不然访问不到  </li></ul><h4 id="浏览器-Browser"><a href="#浏览器-Browser" class="headerlink" title="浏览器(Browser)"></a>浏览器(Browser)</h4><ul><li>作用:HTTP请求的发起,接收,都是有浏览器来完成的</li><li>常用浏览器及其内核  <ul><li>IE: &nbsp; Trident内核  </li><li>Firefox: &nbsp; gecko内核</li><li>Safari(苹果): &nbsp; webkit内核</li><li>Chrome: &nbsp; Blink内核</li><li>Opera(欧朋): &nbsp; 谷歌Blink内核  </li></ul></li><li>内核的不同,引起浏览器兼容问题  </li></ul><h4 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h4><ul><li><p>http: 超文本传输协议(Hypertext Transfer Protocol)</p></li><li><p>包含两部分:  </p><ul><li>请求(request): 浏览器根据网址向对应的服务器发送请求  </li><li>响应(response): 服务器根据请求生成响应文件,将页面内容传输给客户端,在浏览器中进行网页的渲染.  </li></ul></li><li><p>发送HTTP请求的方法: 直接输入网址,点击超级链接.</p></li></ul><h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h4><ul><li>超文本标记语言(Hypertext Markup Language)</li><li>作用: 制作网页</li><li>理解:<ul><li>超文本(Hypertext): 超出文本的范畴,html语言用文本来给文本添加语言,用到的文本就叫超文本(各种标签元素等)</li><li>标记(Markup): w3c组织规定一些具有特殊语意的字符  </li></ul></li></ul><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="HTML框架"><a href="#HTML框架" class="headerlink" title="HTML框架"></a>HTML框架</h3><h4 id="XHTML"><a href="#XHTML" class="headerlink" title="XHTML"></a>XHTML</h4><ul><li>可扩展超文本标记语言（英语：eXtensible Hyper Text Markup Language，XHTML），是一种标记语言，表现方式与超文本标记语言（HTML）类似，不过语法上更加严格。</li><li>从继承关系上讲，HTML是一种基于标准通用标记语言（SGML）的应用，是一种非常灵活的置标语言，而XHTML则基于可扩展标记语言（XML），XML是SGML的一个子集。</li></ul><h4 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h4><ul><li>DOCTYPE Definition: 文本类型定义(DTD)  </li><li>作用: 用来定义文档的规范(规定了HTML’使用哪个版本的书写规范)(面试可能问)  </li><li>版本:<ul><li>html4.01版本开始,结构和样式分离</li><li>Xhtml1.0版本开始,规范做了拓展升级<ul><li>代码必须使用小写,属性必须使用双引号包裹,结束标签必须写关闭符号等待</li></ul></li><li>html4.01和Xhtml1.0两个规范分别包含了3个小规范:<ol><li>Strict &nbsp; 严格版(不能使用font/b/u/i等废弃标签,不能使用框架集)</li><li>Transitional &nbsp; 过渡版/通用版(能使用废弃标签,但不能使用框架集)  </li><li>Frameset &nbsp; 框架集版(可以使用框架)</li></ol></li></ul></li></ul><h4 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h4><ul><li>html5不基于SGML(标准通用语言)规范,不在区分3个小规范,所以不需要引用DTD.  </li><li>html5新特性:  <ul><li>用于绘画的 canvas 元素</li><li>用于媒介回放的 video 和 audio 元素</li><li>对本地离线存储的更好的支持</li><li>新的特殊内容元素，比如 article、footer、header、nav、section</li><li>新的表单控件，比如 calendar、date、time、email、url、search</li></ul></li><li>使用: <code>&lt;!DOCTYPE html&gt;</code></li></ul><h4 id="前端渲染和后端渲染"><a href="#前端渲染和后端渲染" class="headerlink" title="前端渲染和后端渲染"></a>前端渲染和后端渲染</h4><p>后端渲染: (jsp/php)在服务器中直接渲染完客户端请求的网页(结合数据), 返回给客户端的是完整的网页<br>后端路由:后端处理URL和页面之间的映射关系</p><p>前端渲染: (html/js/css)(前后端分离)</p><ul><li>后端只负责提供API返回数据, 不负责任何阶段的内容, 前端通过Ajax获取数据</li><li>浏览器中显示的网页中的大部分内容, 是由前端编写的js代码, 且在浏览器中执行, 最终渲染出来的网页</li><li>后端专注于数据上, 前端专注于交互和可视化上</li></ul><p>前端路由:</p><ul><li>在服务端中路由描述的是 URL 与处理函数之间的映射关系。</li><li>在SPA(Single Page Application)中，路由描述的是URL与UI之间的映射关系，这种映射是单向的，有前端来监听URL, 一旦URL变化就会引起UI更新, 但是不会刷新页面。</li></ul><h4 id="SPA页面"><a href="#SPA页面" class="headerlink" title="SPA页面"></a>SPA页面</h4><p>单页面富应用<br>特点: 前后端分离的基础上加了一成前端路由</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 编程思想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery小结</title>
      <link href="/langblogs/posts/6.html"/>
      <url>/langblogs/posts/6.html</url>
      
        <content type="html"><![CDATA[<h1 id="Jquery-NODE"><a href="#Jquery-NODE" class="headerlink" title="Jquery NODE"></a>Jquery NODE</h1><h2 id="1-jQuery-是一个-JavaScript-库-可以极大地简化了-JavaScript-编程"><a href="#1-jQuery-是一个-JavaScript-库-可以极大地简化了-JavaScript-编程" class="headerlink" title="1. jQuery 是一个 JavaScript 库,可以极大地简化了 JavaScript 编程"></a>1. jQuery 是一个 JavaScript 库,可以极大地简化了 JavaScript 编程</h2><p>其中包含了：</p><ol><li>HTML<ul><li>元素的获取，操作</li><li>事件函数</li></ul></li><li>CSS 操作</li><li>JS：<ul><li>动画和特效</li><li>动画操作</li></ul></li><li>AJAX</li><li>Utilities</li><li>提供大量的插件</li></ol><h2 id="2-引入jQuery"><a href="#2-引入jQuery" class="headerlink" title="2. 引入jQuery"></a>2. 引入jQuery</h2><ol><li><p>安装jQuery</p></li><li><p>从CDN加载：</p><ul><li><p>百度的CDN加载<br><code>&lt;script src="https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"&gt;</code>  </p></li><li><p>Google的CDN加载<br><code>&lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"&gt;</code>  </p></li></ul></li></ol><h2 id="3-使用jQuery"><a href="#3-使用jQuery" class="headerlink" title="3.使用jQuery"></a>3.使用jQuery</h2><ol><li>事件：<ul><li>click(), dbclick()  </li><li>mouseenter(), &nbsp; mouseleava(), &nbsp; mousedown(), &nbsp; mouseup(), &nbsp; hover()</li><li>focus(), blurs()</li><li>resize()</li></ul></li><li>效果：<ul><li>hade(), &nbsp; show(), &nbsp; toggle()</li><li>fadeIn(), &nbsp; fadeOut(), &nbsp; fadeToggle(), &nbsp; fadeTo()</li><li>animate()  </li><li>stop()</li><li>chaining技巧</li></ul></li></ol><h2 id="3-HTML"><a href="#3-HTML" class="headerlink" title="3. HTML"></a>3. HTML</h2><ol><li>捕获和设置HTML元素：<ul><li>text() 设置和获取所选元素的文本内容</li><li>html() 设置或获取所选元素的内容，包含HTML标记</li><li>val()  设置或获取表单字段的值</li><li>attr() &nbsp; prop()   获取属性值<br>prop() 检索HTML元素本身带有的属性,如果检索到属性，返回指定属性值，否则返回空字符串<br>attr() 自定义的DOM属性,如果检索到属性，返回指定属性值，否则返回 undefined</li></ul></li><li>添加元素<ul><li>append() &nbsp; prepend() 在被选元素的结尾/开头插入内容<strong>被选元素内部嵌入</strong></li><li>after() &nbsp; before()    在被选元素之后/前插入内容<strong>在被选元素外追加</strong></li></ul></li><li>删除元素<ul><li>remove()  删除自己和子元素 可以接受一个参数，对要删除的元素做一个过滤</li><li>empty()  - 只删除子元素(相当于清空)</li></ul></li><li>获取/设置css class<ul><li>addClass() 添加一个或多个</li><li>removeClass() 删除一个或多个</li><li>toggleClass()</li><li>css() 设置/获取样式属性<br>   get property –&gt; <code>css("propertyName")</code><br>   set property –&gt; <code>css("propertyName", "value", "propertyName", "value", ...)</code></li></ul></li><li>尺寸<ul><li>width() &nbsp;&nbsp; height()  设置/获取真实值</li><li>innerWidth() &nbsp;&nbsp; innerHeight() 包括内边距(padding)</li><li>outerWidth() &nbsp;&nbsp; outerHeight() 包括内边距(padding)和边框(border)</li></ul></li></ol><h2 id="4-遍历"><a href="#4-遍历" class="headerlink" title="4. 遍历"></a>4. 遍历</h2><ol><li>向上遍历:  <ul><li>parent() 返回被选元素的直接父元素（只会向上一级对DOM树进行遍历）</li><li>parents() 返回被选元素的所有祖先元素，也可通过参数来过滤(parents(“ul”))</li><li>parentsUntil() 返回介于两个给定元素之间的所有祖先元素(相当于返回区间)</li></ul></li><li>向下遍历:<ul><li>children() 返回被选元素的所有直接子元素（只会向下一级对DOM数进行遍历）</li><li>find() 返回被选元素的全部后代元素</li></ul></li><li>水平遍历:<ul><li>siblings() 返回被选元素的所有同胞元素(可传递参数进行筛选)</li><li>next()  返回被选元素的下一个同胞元素</li><li>nextAll() 返回被选元素的所有跟随的同胞元素</li><li>nextUntil() 返回介于两个给定参数之间的所有跟随的同胞元素</li><li>prev() 与上相似,只不过返回之前的同胞元素</li><li>preAll()</li><li>prevUtil()</li></ul></li><li>过滤:<ul><li>first() 返回被选元素的首个元素<br>$(“div p”).first() //返回首个<code>&lt;div&gt;</code>的首个<code>&lt;p&gt;</code></li><li>last() 返回被选元素的最后一个元素<br>$(“div p”).last() //返回最后一个<code>&lt;div&gt;</code>的最后一个<code>&lt;p&gt;</code></li><li>eq() 返回被选元素指定索引值的元素<br>$(“p”).eq(1) //返回索引为2的<code>&lt;p&gt;</code>元素</li><li>filter() 自定义规则,删除规则以外的元素,并返回符合规则的元素<br>$(“p”).filter(“.ur1”) //返回带有类名”ur1”的所有<code>&lt;p&gt;</code>元素</li><li>not() 效果与filter()相反</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> JQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/langblogs/posts/8.html"/>
      <url>/langblogs/posts/8.html</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC-Node"><a href="#JDBC-Node" class="headerlink" title="JDBC-Node"></a>JDBC-Node</h1><h2 id="对JDBC的理解"><a href="#对JDBC的理解" class="headerlink" title="对JDBC的理解"></a>对JDBC的理解</h2><h3 id="面向接口编程的理解"><a href="#面向接口编程的理解" class="headerlink" title="面向接口编程的理解"></a>面向接口编程的理解</h3><ul><li><p>Java DataBase Connection(java 连接数据库)</p></li><li><p>是一套接口(interface):  </p><ul><li>面向接口编程：面向接口调用、面向接口实现类</li><li>实现者</li></ul></li><li><p>面向接口编程的目的:  </p><ul><li>解耦合: 降低程序的耦合度,提高编程的扩展力</li></ul></li><li><p>多态机制是典型的面向对象编程(不是面向具体编程)</p><ul><li><p>举例:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//建议:</span><span class="token comment">// 父类型应用 指向 子类型对象</span><span class="token class-name">Animal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Animal</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//喂养的方法:</span><span class="token comment">//面向父类型编程(参数传了Animal)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">feed</span><span class="token punctuation">(</span><span class="token class-name">Animal</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//不建议:</span><span class="token class-name">Cat</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Dog</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>关系:  </p><ul><li>java程序  –&gt; JDBC interface  –&gt; 数据库</li></ul></li><li><p>准备工作:</p><ul><li>下载相应数据库的驱动jar包,并把驱动配置到环境(记事本开发需要配置ClassPash环境变量,如果用集成开发环境开发,只需要导包就行)中</li></ul></li><li><p>JDBC 编程步骤</p><ol><li>注册驱动　–&gt;　得到数据库标识(要连接到哪个数据库)</li><li>获取连接　–&gt;　JVM的进程和数据库进程之间的通道打开了(进程间的通信)</li><li>获取数据库操作对象　–&gt;　(专门执行SQL语句的对象)</li><li>执行SQL语句　–&gt;　数据<strong>查询</strong>语言DQL，数据<strong>操纵</strong>语言DML，数据<strong>定义</strong>语言DDL，数据<strong>控制</strong>语言DCL</li><li>处理查询结果</li><li>释放资源</li></ol></li></ul><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="1-详细解析"><a href="#1-详细解析" class="headerlink" title="1. 详细解析"></a>1. 详细解析</h3><h4 id="1-注册驱动"><a href="#1-注册驱动" class="headerlink" title="1. 注册驱动"></a>1. 注册驱动</h4>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">Statement</span> stmt <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span>  <span class="token class-name">Driver</span> driver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//mysql的驱动</span>  <span class="token comment">//mariaDb的驱动 --&gt;org.mariadb.jdbc.Driver</span>  <span class="token comment">//其URL为 jdbc:mariadb://localhost:3306/dbname;</span>  <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-获取连接"><a href="#2-获取连接" class="headerlink" title="2. 获取连接"></a>2. 获取连接</h4>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:10/test"</span><span class="token punctuation">;</span><span class="token comment">// jdbc:mysql --&gt; 协议</span><span class="token comment">// localhost(127.0.0.1) --&gt;　本机IP地址</span><span class="token comment">// test  --&gt; 数据库名字</span><span class="token class-name">String</span> user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span><span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span>conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>user<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-获取数据库操作对象"><a href="#3-获取数据库操作对象" class="headerlink" title="3. 获取数据库操作对象"></a>3. 获取数据库操作对象</h4>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Statement专门执行SQL语句</span> <span class="token class-name">Statement</span> stmt  <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-执行SQL语句"><a href="#4-执行SQL语句" class="headerlink" title="4. 执行SQL语句"></a>4. 执行SQL语句</h4>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"insert into db(name,age) values('ZS',18)"</span><span class="token punctuation">;</span><span class="token comment">// 专门执行DML语句 --&gt; insert delete update</span><span class="token comment">// 返回"影响数据库中记录的语句数"</span><span class="token keyword">int</span> count <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">"保存成功"</span> <span class="token operator">:</span> <span class="token string">"保存失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-释放资源"><a href="#5-释放资源" class="headerlink" title="5. 释放资源"></a>5. 释放资源</h4>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 为了保证资源一点被释放,在finally语句块中关闭资源</span><span class="token comment">// 并且要遵循从小到大依次关闭</span><span class="token comment">// 分别对try,catch</span><span class="token keyword">finally</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>stmt <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>conn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-注册驱动的另一种方式-常用的"><a href="#2-注册驱动的另一种方式-常用的" class="headerlink" title="2. 注册驱动的另一种方式(常用的)"></a>2. 注册驱动的另一种方式(常用的)</h3>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//注册驱动的第二种方法</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token string">"org.mariadb.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Class类的类表示正在运行的Java应用程序中的类和接口</span><span class="token comment">// Class.forName()方法 返回与给定字符串名称的类或接口相关联的类对象</span><span class="token comment">// class加载时会导致静态代码块的执行,此时就完成了注册驱动</span><span class="token comment">// 类加载动作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-完整的删除实例"><a href="#3-完整的删除实例" class="headerlink" title="3. 完整的删除实例"></a>3. 完整的删除实例</h3>  <pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo_delete</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> JDBC_DRIVER <span class="token operator">=</span> <span class="token string">"org.mariadb.jdbc.Driver"</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> URL <span class="token operator">=</span> <span class="token string">"jdbc:mariadb://localhost:3306:/test"</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> USER <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> PASSWORD <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Statement</span> stmt <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>JDBC_DRIVER<span class="token punctuation">)</span><span class="token punctuation">;</span>            conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>URL<span class="token punctuation">,</span> USER<span class="token punctuation">,</span> PASSWORD<span class="token punctuation">)</span><span class="token punctuation">;</span>            stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"delete from Temperature Where sample_data=20.6"</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token string">"删除成功"</span> <span class="token operator">:</span> <span class="token string">"删除失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sql <span class="token operator">=</span> <span class="token string">"SELECT * FROM Temperature"</span><span class="token punctuation">;</span>            <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token string">"sample_time"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"sample_data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>stmt <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图床</title>
      <link href="/langblogs/posts/1.html"/>
      <url>/langblogs/posts/1.html</url>
      
        <content type="html"><![CDATA[<p><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2020/09/24/ONp3LiPFWg9medk.jpg" width="983px" alt="例图.jpg"><br><br><a href="https://baike.baidu.com/item/%E5%9B%BE%E5%BA%8A/10721348?fr=aladdin">图床</a>：一般指的是存储图片的服务器。</p><h2 id="发现一个可在线上传，且免费的图床网站，一键生成Markdow，HTML等文件的外链接，方便简洁，超级好用！！！"><a href="#发现一个可在线上传，且免费的图床网站，一键生成Markdow，HTML等文件的外链接，方便简洁，超级好用！！！" class="headerlink" title="发现一个可在线上传，且免费的图床网站，一键生成Markdow，HTML等文件的外链接，方便简洁，超级好用！！！  "></a>发现一个可在线上传，且免费的图床网站，一键生成Markdow，HTML等文件的外链接，方便简洁，超级好用！！！  </h2><p>效果图如下:<br><img src="./medias/detail/load.gif" data-original="https://i.loli.net/2020/09/24/mijsSDZl12KpBVL.png" width="650px" height="300px" alt="例图"></p><hr><h2 id="点击-链接-，到达图床网站。"><a href="#点击-链接-，到达图床网站。" class="headerlink" title="点击[链接]，到达图床网站。"></a><strong>点击<a href="https://sm.ms/">[链接]</a>，到达图床网站。</strong></h2>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 请相信生活 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
